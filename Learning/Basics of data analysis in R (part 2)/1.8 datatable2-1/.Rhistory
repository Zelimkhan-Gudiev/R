V4 = 1:12
)
DT
rows = list(3:4,5:6)
cols = 1:2
for (i in seq_along(rows))
{ set(DT,
i=rows[[i]],
j = cols[i],
value = NA) }
DT
setnames(DT,"old","new")[]
DT <- data.table(V1 = c(1L, 2L),
V2 = LETTERS[1:3],
V3 = round(rnorm(4), 4),
V4 = 1:12
)
# 2) setnames() is used to create or update column names by  reference.
setnames(DT,"old","new")[]
setnames(DT,"old","new")[]
setnames(DT,"V2","Rating")
setnames(DT,"V2","Rating")[]
setnames(DT,c("V2","V3"), c("V2.rating","V3.DataCamp"))
DT
DT <- data.table(V1 = c(1L, 2L),
V2 = LETTERS[1:3],
V3 = round(rnorm(4), 4),
V4 = 1:12
)
setnames(DT,c("V2","V3"), c("V2.rating","V3.DataCamp"))
DT,c("V2","V3"), c("V2.rating","V3.DataCamp")
DT
DT <- data.table(V1 = c(1L, 2L),
V2 = LETTERS[1:3],
V3 = round(rnorm(4), 4),
V4 = 1:12
)
# 3) setcolorder() is used to  reorder columns by reference.
setcolorder(DT, "neworder")
# 3) setcolorder() is used to  reorder columns by reference.
setcolorder(DT, "neworder")[]
DT <- data.table(V1 = c(1L, 2L),
V2 = LETTERS[1:3],
V3 = round(rnorm(4), 4),
V4 = 1:12
)
setcolorder(DT, "neworder")[]
setcolorder(DT, c("V2","V1","V4","V3"))
# neworder is a character vector of the new column name ordering.
setcolorder(DT, c("V2","V1","V4","V3"))[]
products <- fread("products.csv", colClasses = c(price = "double"))
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv", colClasses = c(price = "double"))
products
View(products)
products[price < 1000,
name.with.price := paste0(name, " ( ", price, " руб.)")]
products[order(-price)]
View(products)
products[, price := price / max(price), by=brand]
products[, price := price / max(price), by=brand]
products
products[, price := price / max(price), by=brand]
products
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv", colClasses = c(price = "double"))
products
products[, price := price / max(price), by=brand]
products
products[price < 1000,
name.with.price := paste0(name, " ( ", price, " руб.)")]
products[order(-price)]
products
purchases <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/purchases.csv")
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv")
setkey(purchases, product_id, externalsessionid)
setkey(products, product_id, brand)
key(purchases)
key(products)
merge(purchases, products, by = "product_id")
purchases
View(purchases)
purchases <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/purchases.csv")
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv")
View(products)
View(purchases)
setkey(purchases, product_id, externalsessionid)
setkey(products, product_id, brand)
View(products)
key(purchases)
key(products)
merge(purchases, products, by = "product_id")
a <- merge(purchases, products, by = "product_id")
View(a)
merge(purchases, products, by.x = "product_id", by.y = "product_id")
merge(purchases, products, all.x = T, all.y = F)
merge(purchases, products)
purchases[products, on = "product_id"]
# J, SJ, CJ
products[J(c(158, 208, 10001, 826355, 958238))]
products
products[J(c(158, 208, 10001, 826355, 958238))]
products[data.table(
c(158, 208, 10001, 826355, 958238)
)]
products[.(c(158, 208, 10001, 826355, 958238))]
products[list(c(158, 208, 10001, 826355, 958238))]
print(SJ(c(158, 208, 10001, 826355, 958238)))
key(SJ(c(158, 208, 10001, 826355, 958238)))
print(CJ(c(158, 826355, 958238),
c("Supra", "Func")))
key(CJ(c(158, 826355, 958238),
c("Supra", "Func")))
purchases.with.brands <- merge(
purchases,
products[, list(product_id, brand)],
by="product_id"
)
purchases.with.brands
purchases
purchases.with.brands
pop.20.brands <- head(
purchases.with.brands[,
list(
total.brand.users = length(unique(externalsessionid))
),
by=brand][order(-total.brand.users)], 20)
op.20.brands <- head(
purchases.with.brands[,
list(
total.brand.users = length(unique(externalsessionid))
),
by=brand][order(-total.brand.users)], 20)
pop.20.brands <- head(
purchases.with.brands[,
list(
total.brand.users = length(unique(externalsessionid))
),
by=brand][order(-total.brand.users)], 20)
pop.20.brands
users <- purchases.with.brands[, list(unique.brands = length(unique(brand)),
items = .N,
brand = brand[1]),
by=externalsessionid]
users
brand.loyal.users <- users[items > 1][unique.brands == 1][, list(total.loyal.users = .N), by=brand]
brand.loyal.users
brand.loyal.users
brand.stats <- merge(
pop.20.brands,
brand.loyal.users,
by="brand"
)
brand.stats
brand.stats[, loyal := total.loyal.users / total.brand.users]
brand.stats
brand.stats[order(-loyal)]
product.category <- data.table(product_id = c(1,1,2,2,3),
category_id = c(1,2,1,3,3))
product.category
purchases
purchases <- data.table(product_id = c(1, 2, 3),
totalcents = c(100, 200, 300),
quantity = c(1, 1, 3))
purchases
merge(purchases, purchases)
purchases
View(product.category)
merge(purchases, purchases)
merge(purchases, product.category)
product.category
merge(purchases, product.category)
purchases <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/purchases.csv")
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv")
purchases <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/purchases.csv")
products <- fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/1.8 stepik/products.csv")
purchases
products
purchases.with.brands <- merge(
purchases,
products[, list(product_id, brand)],
by="product_id"
)
purchases.with.brands
product.category <- data.table(product_id = c(1,1,2,2,3),
category_id = c(1,2,1,3,3))
product.category
purchases <- data.table(product_id = c(1, 2, 3),
totalcents = c(100, 200, 300),
quantity = c(1, 1, 3))
purchases
merge(purchases,
product.category[product_id, category_id],
by = "product_id")
merge(purchases,
product.category[, list(product_id, category_id)],
by = "product_id")
merge(purchases,
product.category[, list(category_id)],
by = "product_id")
merge(purchases,
product.category[, category_id],
by = "product_id")
merge(purchases,
product.category[, list(product_id, category_id)],
by = "product_id")
merge(purchases, product.category)
df <- merge(purchases,
product.category[, list(product_id, category_id)],
by = "product_id")
df[, .(2, 3,4)]
df[.(2, 3,4)]
df[, .(2, 3, 4)]
df[, .(2, 3, 4)]
df
df[, .(category_id, totalcents, quantity)]
df[, .(category_id, sum(totalcents), sum(quantity)), by =  category_id]
df[, .(category_id, sum(totalcents), sum(quantity)), by =  category_id]
df[, .(category_id, totalcents = sum(totalcents), quantity = sum(quantity)), by =  category_id]
df[, .(category_id, totalcents = sum(totalcents), quantity = sum(quantity))]
df
df[, .(totalcents = sum(totalcents), quantity = sum(quantity)), by =  category_id]
setkey(purchases, product_id)
setkey(product.category, product_id)
df <- merge(purchases,
product.category[, list(product_id, category_id)])
df
df[, .(totalcents = sum(totalcents), quantity = sum(quantity)), by =  category_id]
merge(purchases, purchases, all=T)[,.(totalcents=sum(totalcents), quantity=sum(quantity)), by=category_id]
merge(purchases, purchases, all=T)[,.(totalcents=sum(totalcents), quantity=sum(quantity)), by=category_id]
setkey(purchases, product_id)
setkey(purchases, product_id)
merge(purchases, purchases, all=T)[,.(totalcents=sum(totalcents), quantity=sum(quantity)), by=category_id]
merge(purchases, product.category, all=T)[,.(totalcents=sum(totalcents), quantity=sum(quantity)), by=category_id]
merge(setkey(product.category, product_id),
setkey(purchases, product_id),
by = 'product_id')[, .(
totalcents = sum(totalcents),
quantity = sum(quantity)
),
by = category_id]
merge(setkey(product.category, product_id),
setkey(purchases, product_id),
by = 'product_id')
merge(setkey(product.category, product_id),
setkey(purchases, product_id),
by = 'product_id')
merge(setkey(product.category, product_id),
setkey(purchases, product_id),
by = 'product_id')[, .(
totalcents = sum(totalcents),
quantity = sum(quantity)
)
merge(setkey(product.category, product_id),
merge(setkey(product.category, product_id),
setkey(purchases, product_id),
by = 'product_id')[, .(
totalcents = sum(totalcents),
quantity = sum(quantity)
),
by = category_id]
products[
order(-price)
]
products[
order(-price),
.(name = head(name, 3),
price = head(price, 3)),
by = brand
]
products[
order(-price),
head(.SD,3),
by = brand
]
products[
order(-price),
head(.SD,3),
by = brand
]
products
products[
order(-price),
.(name = head(name, 3),
price = head(price, 3)),
by = brand
]
# Step 8 of 9
# Напишите функцию, которая будет с помощью := добавлять столбец «price.portion», содержащий процент стоимости товара в заказе,
# с двумя знаками после запятой (нули после запятой не опускать). Проверяться будет возвращаемая из функции таблица.
# Тип нового столбца - character (строка). Записи с неположительным количеством товаров убрать перед расчётом.
# Например: если в заказе есть три позиции: 1 ед. по 100р, 1 ед. по 300 руб. и 2 ед. по 50 р., в столбце должно быть «20.00, 60.00, 20.00:
sample.purchases <- data.table(price = c(100, 300, 50, 700, 30),
ordernumber = c(1,1,1,2,3),
quantity = c(1,1,2,1,-1),
product_id = 1:5)
# Step 8 of 9
# Напишите функцию, которая будет с помощью := добавлять столбец «price.portion», содержащий процент стоимости товара в заказе,
# с двумя знаками после запятой (нули после запятой не опускать). Проверяться будет возвращаемая из функции таблица.
# Тип нового столбца - character (строка). Записи с неположительным количеством товаров убрать перед расчётом.
# Например: если в заказе есть три позиции: 1 ед. по 100р, 1 ед. по 300 руб. и 2 ед. по 50 р., в столбце должно быть «20.00, 60.00, 20.00:
sample.purchases <- data.table(price = c(100, 300, 50, 700, 30),
ordernumber = c(1,1,1,2,3),
quantity = c(1,1,2,1,-1),
product_id = 1:5)
purchases <- sample.purchases
purchases
purchases[, price.portion := price / price * quantity, by = .(ordernumber, product_id)]
purchases
purchases[, price.portion := price / (price * quantity), by = .(ordernumber, product_id)]
purchases
purchases[quantity > = 0, price.portion := price / (price * quantity), by = .(ordernumber, product_id)]
purchases[quantity >= 0, price.portion := price / (price * quantity), by = .(ordernumber, product_id)]
purchases
purchases[quantity >= 0,
price.portion := price / (price * quantity),
by = .(ordernumber, product_id)]
purchases
purchases[quantity >= 0,
.(price.portion := price / (price * quantity)),
by = .(ordernumber, product_id)]
purchases[quantity >= 0,
.(price.portion := price / (price * quantity)),
by = .(ordernumber, product_id)]
purchases
purchases[quantity >= 0,
list(price.portion := price / (price * quantity)),
by = .(ordernumber, product_id)]
purchases[quantity>=0,
list(price.portion := price / (price * quantity)),
by = .(ordernumber, product_id)]
purchases
purchases[quantity>=0, ]
purchases[quantity>=0,
list(price.portion := price / (price * quantity))]
purchases
purchases[quantity>=0,
list(price.portion := price / (price * quantity))]
purchases[quantity>=0,
price.portion := price / (price * quantity)]
purchases
price * quantity
purchases[quantity>=0,
price.portion := price / (price * quantity)]
purchases
purchases[quantity>=0, ]
purchases <- purchases[quantity>=0, ]
purchases
purchases[ ,
price.portion := price / (price * quantity)
]
purchases
purchases[ ,
price.portion := price / (price * quantity),
by = .(ordernumber)
]
purchases
# Step 8 of 9
# Напишите функцию, которая будет с помощью := добавлять столбец «price.portion», содержащий процент стоимости товара в заказе,
# с двумя знаками после запятой (нули после запятой не опускать). Проверяться будет возвращаемая из функции таблица.
# Тип нового столбца - character (строка). Записи с неположительным количеством товаров убрать перед расчётом.
# Например: если в заказе есть три позиции: 1 ед. по 100р, 1 ед. по 300 руб. и 2 ед. по 50 р., в столбце должно быть «20.00, 60.00, 20.00:
sample.purchases <- data.table(price = c(100, 300, 50, 700, 30),
ordernumber = c(1,1,1,2,3),
quantity = c(1,1,2,1,-1),
product_id = 1:5)
sample.purchases
100/(100 + 300 + 50*2)
purchases[ ,
price.portion := price * quantity / (price * quantity),
by = .(ordernumber)
]
purchases
purchases[ ,
price.portion := price * quantity / sum((price * quantity)),
by = .(ordernumber)
]
purchases
purchases[ ,
price.portion := price * quantity / (sum((price * quantity) * 100),
purchases[ ,
price.portion := price * quantity / sum((price * quantity) * 100),
by = .(ordernumber)
]
purchases
purchases[ ,
price.portion := price * quantity / sum((price * quantity)),
by = .(ordernumber)
]
purchases
format(round(1.20, 2), nsmall = 2)
round(1.20, 2)
format(round(1.20, 2), nsmall = 1)
format(round(1.20, 2), nsmall = 2)
format(round(1.20, 2), nsmall = 3)
round(1.20, 2)
round(1.20, 1)
round(1.20, 3)
purchases[ ,
price.portion := price * quantity / sum((price * quantity)),
by = .(ordernumber)
]
format(0.2), nsmall = 3)
format(0.2, nsmall = 3)
purchases[ ,
price.portion := (price * quantity / sum((price * quantity))) * 100,
by = .(ordernumber)
][]
format(20, nsmall = 3)
format(20, nsmall = 2)
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100),2),
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100), 2),
purchases
purchases[ ,
price.portion := format(price * quantity / sum((price * quantity))) * 100), 2),
purchases[ ,
price.portion := format(price * quantity / sum((price * quantity))) * 100, 2),
purchases[ ,
price.portion := price * quantity / sum((price * quantity))) * 100,
purchases[ ,
price.portion := price * quantity / sum((price * quantity))) * 100,
purchases[ ,
price.portion := (price * quantity / sum((price * quantity))) * 100,
by = .(ordernumber)
]
purchases
purchases[ , : = format(price.portion, 2)]
purchases[ , .(: = format(price.portion, 2))]
purchases[ , price.portion: = format(price.portion, 2)]
purchases[ , price.portion := format(price.portion, 2)]
purchases
purchases[ ,format(price.portion, 2)]
price.portion
ormat(purchases$price.portion, 2)
format(purchases$price.portion, 2)
format(20, nsmall = 2)
a <- 20
format(a, nsmall = 2)
a <- 1:3
format(a, nsmall = 2)
format(as.numeric(a), nsmall = 2)
purchases[ , price.portion := format(as.numeric(price.portion), 2)]
purchases
format(as.numeric(purchases$price.portion), 2)
format(as.numeric(purchases$price.portion), 2)
format(as.numeric(purchases$price.portion), nsmall = 2)
purchases[ , price.portion := format(as.numeric(price.portion), nsmall = 2)]
purchases
mark.position.portion <- function(purchases) {
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := (price * quantity / sum((price * quantity))) * 100,
by = .(ordernumber)
]
purchases[ , price.portion := format(as.numeric(price.portion), nsmall = 2)]
}
mark.position.portion(sample.purchases)
mark.position.portion(sample.purchases)
sample.purchases
mark.position.portion(sample.purchases)
purchases
mark.position.portion <- function(purchases) {
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := (price * quantity / sum((price * quantity))) * 100,
by = .(ordernumber)
]
purchases[ , price.portion := format(as.numeric(price.portion), nsmall = 2)]
return(purchases)
}
mark.position.portion(sample.purchases)
mark.position.portion(sample.purchases)
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format(price * quantity / sum((price * quantity))) * 100, nsmall = 2
by = .(ordernumber)
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format(price * quantity / sum((price * quantity))) * 100, nsmall = 2
by = .(ordernumber)
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format(price * quantity / sum((price * quantity))) * 100, nsmall = 2),
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100, nsmall = 2)),
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100, nsmall = 2)),
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100, nsmall = 2),
by = .(ordernumber)
]
purchases
mark.position.portion <- function(purchases) {
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100, nsmall = 2),
by = .(ordernumber)
]
}
mark.position.portion(sample.purchases)
sample.purchases
mark.position.portion <- function(purchases) {
purchases <- purchases[quantity>=0, ]
purchases[ ,
price.portion := format((price * quantity / sum((price * quantity))) * 100, nsmall = 2),
by = .(ordernumber)
][]
}
mark.position.portion(sample.purchases)
mark.position.portion(sample.purchases)
