## switch
switch("factorial",
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
switch("sum",
sum = 5 + 5,
product = 5 * 5,
factorial = factorial(5),
0)
## repeat
i <- 0 # Создадим переменную i
repeat {
i <- i + runif(1) # Будем добавлять к переменной i случайное значение от 0 до 1
print(i)
if (i > 5) break # до тех пор пока значение i не превысит 5. Когда значение i превысит 5,
# то при помощи условного оператора if и ключевого слова break выйдим из цикла.
}
## while
# while работает похожим образом
i <- 2^14
while(i > 100) {
i <- i/2
print(i)
}
for (i in 1:8) {
if (i %% 2 == 0)
print(i)
}
#### Step 3 of 10 ####
#### Step 4 of 10 ####
# Выполните в своей сессии следующие команды (про функцию set.seed я расскажу чуть далее):
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
x
length(x[x > - 0.2 & x < 0.3])
x[x > -0.2 & x < 0.3]
length(x[x > - 0.2 & x < 0.3])
installed.packages()
help(package = "stats")
help(package = "zoo") # Depends: R (>= 3.1.0), stats
#### Step 9 of 10 ####
# Поизучайте повнимательнее вывод функции sessionInfo()﻿. Что он содержит?
sessionInfo()
remove(list = ls())
## Именна переменных
df <- data.frame(x = 1:4,
y = LETTERS[1:4],
z = c(T, F),
row.names = c("Alpha", "Bravo", "Charlie", "Delta"))
df
rownames(df)
colnames(df)
dimnames(df)
## Размерности
nrow(df)
ncol(df)
dim(df)
c(nrow(df), ncol(df))
# Две важные особенности
length(df) # length() возвращает количество слолбцов (переменных), а не общее количество элементов.
df
# Это происходит потому-что дата фрейм (data frame) это список (list) уложенный по столбцам, а функция length
# в случае ее применнеия по отношению к списку (list) возвращает количество элементов списка
length(list(x = 1:4, y = LETTERS[1:4]))
names(df) # names() возвращает имена слолбцов (переменных). В случае применения фунций names и colnames по отношению к дата фрейму (data frame),
# они возврашают один и тот же результат. Функция length  в случае ее применнеия по отношению к списку (list) возвращает имена элементов списка
names(list(x = 1:4, y = LETTERS[1:4]))
df
## Индексация дата фрейм (data frame)
# Как для матрицы
df[3:4, -1] # положительная и отрицательная индексация
df[c(F, T), c("z", "x")] # логическая индексация и индексация по именам
df[, 1] # Если обратится только к одной переменной при помощи индексации с квадратными скобками [], то произойдет тоже самое, что ии с матриицей,
# а именно схлопнется размеррность.
df[, 1, drop = FALSE] # Если мы не хотим, чтобы размерность схлопывалась, то мы необходимо указывать аргумент drop со значением FALSE
# Как для списка
df$z
df
df[[3]]
df[["z"]]
df[z]
df['z']
df[df$x > 2, ]
subset(df, x > 2)
subset(df, x > 2, select = c(x, z))
subset(df, x > 2)
subset(df, x > 2, select = c(x, z))
## Комбиниррование data frame
# Функции cbind и rbind работают, как для матриц:
rbind(df, data.frame(x = 5:6, # при применении rbind необходимо, чтобы именна у дата фреймов совподали в точности
y = c("K", "Z"),
z = TRUE,
row.names = c("Kappa", "Zulu")))
df
## Комбиниррование data frame
# Функции cbind и rbind работают, как для матриц:
rbind(df, data.frame(x = 5:6, # при применении rbind необходимо, чтобы именна у дата фреймов совподали в точности
y = c("K", "Z"),
z = TRUE,
row.names = c("Kappa", "Zulu")))
cbind(df, data.frame(season = c("Summer", "Autumn", "Winter", "Spring"), # при применении сbind необходимо, чтобы количество переменных
temp = c(20, 5, -10, 5)))                #  у дата фреймов совподало в точности
df
df_salary <- data.frame(x = c(3, 2, 6, 1), salary = c(100, 100, 300, 500))
df_salary
merge(df, df_salary, by = "x")
right_join(df, df_salary, by = "x" )
library(dplyr)
right_join(df, df_salary, by = "x" )
df
df_salary
left_join(df, df_salary, by = "x" )
# Анализ данных - это далеко не всегда заумные академические модели в вакууме. Иногда на основе простых манипуляций можно сделать
# разумные выводы и облегчить принятие повседневных решений.
# Дата фрейм attitude - встроенный массив данных, содержащий рейтинг департаментов одной финансовой компании, составленный сотрудниками.
# Представьте, что вы хотите устраиваться как раз в эту компанию, и дата фрейм (совершенно случайно!) оказался в вашем распоряжении.
# Вы решили, что самое главное для вас - это возможность учиться новому (learning). Возьмите 5 топовых департаментов по этому показателю.
# Из этого набора вам более всего подойдёт тот департамент, который имеет наибольшую сумму баллов по трём показателям: реакция
# на жалобы работников (complaints), надбавки в зависимости от результатов работы (raises) и возможность продвижения (advance).
# Какой же департамент вам выбрать? Напишите его номер XX (номер строки в дата фрейме).
###----
# With
rm(list = ls())
Num <- c(100, 100, 100, 100, 100)
Cost <- c(1200, 1300, 1400, 1500, 1600)
data_A <- data.frame(Num, Cost, stringsAsFactors = FALSE)
View(data_A)
with(data_A, Num * Cost)
with(data_A, Cost / Num)
# Within
within(data_A, Product <- Num * Cost)
with(data_A, Num * Cost)
# Within
within(data_A, Product <- Num * Cost)
within(data_A, Q <- Cost / Num)
###----
#
df <- attitude
df[with(df, order(- df$learning)), ]
arrange(df, learning)
arrange(df, - learning)
with(data_A, Num * Cost)
with(data_A, Cost / Num)
within(data_A, Product <- Num * Cost)
df <- arrange(df, - learning)
arrange(df, - learning) == df[with(df, order(- df$learning)), ]
df <- head(df[order(- df$learning), ], 5)
df
df <- df[c("learning", "complaints", "raises", "advance")]
df
df <- within(df, sum_three <- complaints + raises + advance)
df
df
df <- df[order(df$sum_three), ]
df
df[order(- df$sum_three), ]
df <- df[order(- df$sum_three), ]
df
# 2
#встроенный массив
a <- attitude
a$learning
-a$learning
head(order(-a$learning), 5)
a
head(a)
head(order(-a$learning), 5)
b$complaints + b$raises + b$advance
#сортируем (- по убыванию) по столбцы learning и выбираем первые 5 строк
b <- a[head(order(-a$learning), 5) ,]
b
head(order(-a$learning), 5)
df <- arrange(df, - learning)
head(df)
df
###----
#
df <- attitude
df
df[order(- df$learning), ]
###----
#
df <- attitude
df
head(order(-a$learning), 5)
order(-a$learning)
#считаем суммы других показателей
b$sm <- b$complaints + b$raises + b$advance
b
rownames(b[head(order(- b$sm), 1), ])
order(- b$sm)
head(order(- b$sm), 1)
b[head(order(- b$sm), 1), ]
#сортируем и смотрим имя строки для первого
rownames(b[head(order(- b$sm), 1), ])
#
names(which.max(rowSums(attitude[order(attitude$learning, decreasing = T),][1:5, ] [c("complaints", "raises", "advance")])))
subset(attitude, learning >= sort(attitude$learning, T)[5])[1:5, ]
sort(attitude$learning, T)
sort(attitude$learning, T)[5])
sort(attitude$learning, decreasing = T)[1:5]
sort(attitude$learning, decreasing = T)[1:5]
top5
#
# Решение без использования каких-либо функций, не присутствовавших в минувших глоссариях.
# Найдём пять топовых департаментов по показателю learning:
top5 <- sort(attitude$learning, decreasing = T)[1:5]
top5
which(attitude$learning >= min(top5))
min(top5)
rbind(attitude[row_number, ])
# Найдём индексы (номера строк) этих департаментов:
row_number <- which(attitude$learning >= min(top5))
rbind(attitude[row_number, ])
# Выведем из дата-фрейма attitude только интересующие нас строки:
new_table <- rbind(attitude[row_number, ])
attitude[row_number, ]
new_table
attitude[row_number, ]
rbind(attitude[row_number, ])
subset(new_table, select = c(complaints,raises,advance)
subset(new_table, select = c(complaints,raises,advance))
subset(new_table, select = c(complaints,raises,advance))
# Вычислим суммы по показателям complaints, raises и advance. Создастся именованный вектор, в качестве имён будут выступать номера
# строк исходного дата-фрейма:
top_sums <- rowSums(subset(new_table, select = c(complaints,raises,advance)))
top_sums
# Найдём максимальное значение в векторе top_sums и выведем его имя:
names(which.max(top_sums))
df <- attitude %>%
arrange(desc(learning)) %>%
slice(1:5) %>%
mutate(my_sum = complaints + raises + advance) %>%
filter(my_sum == max(my_sum))
df
attitude %>%
arrange(desc(learning))
attitude %>%
arrange(desc(learning)) %>%
slice(1:5)
attitude %>%
arrange(desc(learning)) %>%
slice(1:5) %>%
mutate(my_sum = complaints + raises + advance)
attitude %>%
arrange(desc(learning)) %>%
slice(1:5) %>%
mutate(my_sum = complaints + raises + advance) %>%
filter(my_sum == max(my_sum))
iris
subset(attitude, rating < 50, -rating)
subset(sel = -rating, sub = rating < 50, attitude)
attitude[attitude$rating < 50, -"rating"]
attitude[attitude$rating < 50, names(attitude) != "rating"]
attitude[rating < 50, names(attitude) != "rating"]
subset(sel = -rating, sub = rating < 50, attitude)
attitude[attitude$rating < 50, -"rating"]
attitude[attitude$rating < 50, names(attitude) != "rating"]
subset(attitude, rating < 50, -rating)
subset(sel = -rating, sub = rating < 50, attitude)
attitude[attitude$rating < 50, -"rating"]
attitude[attitude$rating < 50, names(attitude) != "rating"]
attitude[rating < 50, names(attitude) != "rating"]
#### Step 8 of 12 ####
# Визуальная инспекция данных -- важный этап предварительного анализа данных. Она позволяет заметить очевидные несоответствия и аномалии в данных,
# и, что немаловажно, "почувствовать" структуру дата фрейма. Какие в нём есть переменные? Что они означают?
# В каких единицах измеряются? Какой у них диапазон значений?
# Используйте вспомогательные функции, о которых я говорил, чтобы разглядеть встроенный дата фрейм с названием quakes.
# Сопоставьте значения из этого дата фрейма и их описания.
# Подсказки:
# описание дата фрейма есть в справке: ?quakes
# медиана -- одна из описательных статистик; медиана и среднее -- разные вещи!
df <- quakes
head(df)
summary(df)
library(psych)
describe(df)
View(df)
tail(df)
head(df)
tail(df)
head(df)
summary(df)
#### Step 9 of 12 ####
read.csv("https://github.com/tonytonov/Rcourse/blob/master/R%20programming/avianHabitat.csv")
