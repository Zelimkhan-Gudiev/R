fun_list
c(mean, max)
str(c(mean, max))
(f <- function(x) x^5)
f
sd
fun_list <- c(mean, max)
fun_list
square <- function() function(x) x^2
square()
square()(5)
f <- function(x) {
g <- function(y) if (y > 0) 1 else if (y < 0) -1 else 0
sapply(x, g)
}
f(-100:100)
f(seq(-10, 10, by = 2))
var
plot
methods(plot)
v <- 1:100
sample(v, 10, NA)
v[sample(v, 10)]
v[sample(v, 10)] <- NA
v
v[v == NA]
v
v[v = NA]
v[v += "NA"]
v[v == "NA"]
v[v == "NA"] %>% length()
has_na <- function(v) {
for (k in v) if (is.na(k)) return(TRUE)
return(FALSE)
}
has_na <- function(v) {
for (k in v) if (is.na(k)) return(TRUE)
return(FALSE)
}
has_na <- function(v) {
for (k in v) if (is.na(k)) return(TRUE)
return(FALSE)
}
has_na(v)
is.na(v)
any(is.na(v)
any(is.na(v)
any(is.na(v))
paste('abc', "123")
paste('abc', "123", sep = "")
rev(123)
rev(123)
rev(strsplit("123", "")[[1]])
rev(strsplit("123", ""))
my_string <- "123"
reversed_string <- rev(strsplit(my_string, "")[[1]])
reversed_string <- paste(reversed_string, collapse = "")
reversed_string
my_string <- "123"
reversed_string <- rev(strsplit(my_string, "")[[1]])
reversed_string
strsplit("123")
strsplit("123", "")
my_string
strsplit(my_string, "")
rev(strsplit(my_string, "")[[1]])
paste(reversed_string, collapse = "")
rev(123)
rev(123)[1]
rev(123)[[1]]
rev(strsplit(my_string, "")
rev(strsplit(my_string, "")
rev(strsplit(my_string, "")
strsplit(my_string, "")[[1]]
strsplit(my_string, "")[[1]]
strsplit("123", "")
rev(123)[[1]]
strsplit("123", "")[[1]]
strsplit("123", "")
strsplit("123", "")[[1]]
strsplit(my_string, "")[[1]]
strsplit(my_string, "")
rev(strsplit(my_string, "")[[1]])
reversed_string
reversed_string <- rev(strsplit(my_string, "")[[1]])
reversed_string
strsplit("123", "")[[1]]
strsplit("123", "")
my_string
strsplit(my_string, "")
paste("123", "abc")
paste("123", "abc", collapse = "")
paste0("123", "abc", collapse = "")
paste0("123", "abc", "def")
paste0("123", "abc", "def", collapse = " ")
paste0("123", "abc", "def", sep = " ", collapse = " ")
paste0("123", "abc", sep = " ", collapse = "")
paste0("123", "abc", "def", sep = " ", collapse = " ")
paste0("123", "abc", "def", sep = " ", collapse = "")
paste0("123", "abc", sep = "", collapse = "")
paste0("123", "abc", "def", sep = " ", collapse = "")
paste0("123", "abc", sep = " ", collapse = "")
paste0("123", "abc", sep = " ", collapse = " ")
paste0("123", "abc", sep = " ", collapse = "")
paste0("123", "abc", sep = "", collapse = "")
paste0("123", "abc", "def", sep = " ", collapse = "")
paste0("123", "abc", "def", sep = " ", collapse = " ")
paste("123", "abc", "def", sep = " ", collapse = "")
paste0("123", "abc", sep = "", collapse = "")
paste("123", "abc", "def", sep = " ", collapse = "")
paste0("abc", sep = "", collapse = "")
paste("abc", "def", sep = " ", collapse = "")
paste0("abc", "def", sep = " ", collapse = "")
paste0("abc", "def", sep = " ", collapse = "")
paste("abc", "def", sep = " ", collapse = "")
paste("abc", sep = "", collapse = "")
paste("abc", "def", sep = " ", collapse = "")
paste("abc", "def", sep = " ")
paste("abc", sep = "")
paste("abc", sep = "")
paste("abc", sep = "")
paste("abc", sep = "")
paste("abc", "def", sep = " ")
paste(c("abc", "def"), sep = " ")
paste("abc", "def", sep = "+")
paste(c("x", "x"), collapse = "_")
paste(1:2, 3:4, 5:6, sep = "&")
res1 <- paste(1:2, 3:4, 5:6, sep = "&")
res1
pattern <- 123
pattern
paste0(pattern, res1)
res1 <- paste("abc", "def", sep = " ")
pattern <- 123
paste0(pattern, res1)
paste0(pattern, res1, pattern)
rev(pattern)
strsplit(my_string, "")
rev(strsplit(my_string, "")[[1]])
rev(strsplit(my_string, "")[[1]])
strsplit(my_string, "")[[1]]
rev(strsplit(my_string, "")[[1]])
strsplit(my_string, "")
strsplit(my_string, "")[[1]]
rev(strsplit(my_string, ""))
rev(strsplit(my_string, "")[[1]])
strsplit(my_string, "") %>% typeof()
strsplit(my_string, "")[[1]] %>% typeof()
rev(strsplit(my_string, "")) %>% typeof()
rev(strsplit(my_string, "")[[1]]) %>% typeof()
a <- strsplit(my_string, "")
a
a <- rev(strsplit(my_string, "")[[1]]) %>% typeof()
a <- strsplit(my_string, "") %>% typeof()
a <- strsplit(my_string, "")[[1]] %>% typeof()
a <- rev(strsplit(my_string, "")) %>% typeof()
a <- rev(strsplit(my_string, "")[[1]]) %>% typeof()
a
a <- strsplit(my_string, "")
a
strsplit(my_string, "")[[1]] %>% typeof()
a <- strsplit(my_string, "")
a
a <- strsplit(my_string, "")
typeof(a)
a <- strsplit(my_string, "")[[1]]
typeof(a)
a <- rev(strsplit(my_string, ""))
typeof(a)
rev(strsplit(my_string, "")[[1]])
typeof(a)
a
typeof(a)
a <- strsplit(my_string, "")
typeof(a)
a <- strsplit(my_string, "")[[1]]
typeof(a)
a <- rev(strsplit(my_string, ""))
typeof(a)
rev(strsplit(my_string, ""))
strsplit(my_string, "")[[1]]
strsplit(my_string, "")
strsplit(my_string, "")[[1]]
rev(strsplit(my_string, ""))
rev(strsplit(my_string, "")[[1]])
pattern <- 123
rev_pat <- rev(strsplit(pattern, "")[[1]])
paste0(pattern, res1, pattern)
a <- strsplit(my_string, "")
decorate_string <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- rev(strsplit(pattern, "")[[1]])
res <- paste0(pattern, res1, pattern)
}
decorate_string1 <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- rev(strsplit(pattern, "")[[1]])
res <- paste0(pattern, res1, pattern)
}
decorate_string(pattern = 123, "abc")
decorate_string(pattern = "123", "abc")
decorate_string(pattern = "123", "abc")
decorate_string(pattern = "123", "abc")
decorate_string1(pattern = "123", "abc")
paste("abc", "def", sep = "+")
paste(c("x", "x"), collapse = "_")
paste(1:2, 3:4, 5:6, sep = "&")
decorate_string1 <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- rev(strsplit(pattern, "")[[1]])
res <- paste0(pattern, res1, pattern)
}
decorate_string1(pattern = "123", "abc")
decorate_string1 <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- rev(strsplit(pattern, "")[[1]])
res <- paste0(pattern, res1, pattern)
return(res)
}
decorate_string1(pattern = "123", "abc")
decorate_string <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- rev(strsplit(pattern, "")[[1]])
res <- paste0(pattern, res1, pattern)
return(res)
}
decorate_string(pattern = "123", "abc")
decorate_string(pattern = "123", "abc", "def")
decorate_string(pattern = "123", c("abc", "def"))
decorate_string <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- paste(rev(strsplit(pattern, "")[[1]]), collapse = "")
res <- paste0(pattern, res1, pattern)
return(res)
}
decorate_string(pattern = "123", "abc")
rev_pat <- paste(rev(strsplit(pattern, "")[[1]]), collapse = "")
res <- paste0(pattern, res1, rev_pat)
decorate_string <- function(pattern, ...) {
res1 <- paste(...)
rev_pat <- paste(rev(strsplit(pattern, "")[[1]]), collapse = "")
res <- paste0(pattern, res1, rev_pat)
return(res)
}
decorate_string(pattern = "123", "abc")
decorate_string(pattern = "123", "abc", "def")
decorate_string(pattern = "123", c("abc", "def"))
decorate_string(pattern = "123", "abc", "def", sep = "+")    # "123abc+def321"
decorate_string(pattern = "!", c("x", "x"), collapse = "_")  # "!x_x!"
decorate_string(pattern = ".:", 1:2, 3:4, 5:6, sep = "&")    # ".:1&3&5:." ".:2&4&6:." (вектор длины 2)
norm
methods(norm)
"%+%" <- function(x, y) {
max_len <- max(length(x), length(y))
x_padded <- c(x, rep(NA, max_len - length(x)))
y_padded <- c(y, rep(NA, max_len - length(y)))
result <- x_padded + y_padded
return(result)
}
x <- 1:5
y <- 1:2
max(length(x), length(y))
length(x)
length(y)
max_len <- max(length(x), length(y))
x_padded <- c(x, rep(NA, max_len - length(x)))
x_padded
y_padded <- c(y, rep(NA, max_len - length(y)))
y_padded
max_len - length(x)
max_len - length(y)
x_padded
result
result <- x_padded + y_padded
result
length(x) <- length(y) <- max(length(x), length(y))
length(x)
length(y)
x + y
dapply
rapply
mapply
dapply
tapply
eapply
sapply
vapply
lapply
apply
Vectorize(existsFunction, "f")(paste0(letters, "apply"))
existsFunction
paste0(letters, "apply"
paste0(letters, "apply")
paste0(letters, "apply")
Vectorize(existsFunction, "f")(paste0(letters, "apply"))
x <- paste(letters, "apply", sep = "")
vef = Vectorize(existsFunction, "f")
y <- x[vef(x)]
paste(letters, "apply", sep = "")
Vectorize(existsFunction, "f")
vef(x)
y <- x[vef(x)]
x[vef(x)]
cat_temper <- c("задиристый", "игривый", "спокойный", "ленивый")
cat_color <- c("белый", "серый", "чёрный", "рыжий")
cat_age <- c("кот", "котёнок")
cat_trait <- c("с умными глазами", "с острыми когтями", "с длинными усами")
cat_catalogue <- expand.grid(cat_temper, cat_color, cat_age, cat_trait)
colnames(cat_catalogue) <- c("temper", "color", "age", "trait")
cat_catalogue <- cat_catalogue[order(cat_catalogue$temper, cat_catalogue$color, cat_catalogue$age, cat_catalogue$trait), ]
expand.grid(cat_temper, cat_color, cat_age, cat_trait)
# Посмотрим на первый элемент каталога
cat_catalogue[1, ]
cat_catalogue <- expand.grid(cat_temper, cat_color, cat_age, cat_trait)
cat_catalogue_sorted <- cat_catalogue[order(apply(cat_catalogue, 1, paste, collapse = " ")), ]
cat_catalogue_sorted[42, ]
xpand.grid(cat_temper, cat_color, cat_age, cat_trait)
expand.grid(cat_temper, cat_color, cat_age, cat_trait)
a <- letters[1:3]
b <- 1:3
expand.grid(a, b)
apply(cat_catalogue, 1, paste, collapse = " "))
apply(cat_catalogue, 1, paste, collapse = " ")
order(apply(cat_catalogue, 1, paste, collapse = " "))
m1 <- function(x, y) {
m <- matrix(0, length(x), length(y))
for (i in 1:length(x))
for (j in 1:length(y)) {
m[i, j] = x[i] * y[j]
}
m
}
m2 <- function(x, y) {
vapply(y, function(i) i * x, numeric(length(x)))
}
m3 <- function(x, y) x %o% y
x <- rnorm(100)
y <- runif(1000)
all.equal(m1(x, y), m2(x, y))
all.equal(m2(x, y), m3(x, y))
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
library(microbenchmark)
microbenchmark(m1(x, y), m2(x, y), m3(x, y))
library('microbenchmark')
library('microbenchmark')
funs <- c("print","summary","plot")
meths <- lapply(funs, methods)
meths
grepl("matrix", meths)
grepl("function", meths)
grepl("default", meths)
funs
meths
methods(print)
grepl('print', methods(print))
grepl('summary', methods(print))
methods(print)[grepl('summary', methods(print))]
grepl('summary', methods(print))
methods(plot)
grepl('plot', methods(plot))
lapply(funs, methods)
methods(plot)
grepl('function', methods(plot))
methods(plot)[grepl('function', methods(plot))]
methods(plot)[grepl('print', methods(plot))]
methods(plot)[grepl('summary', methods(plot))]
# print
methods(plot)[grepl('print', methods(print))]
methods(plot)[grepl('summary', methods(print))]
methods(plot)[grepl('function', methods(print))]
# plot
methods(plot)[grepl('print', methods(plot))]
methods(plot)[grepl('summary', methods(plot))]
methods(plot)[grepl('function', methods(plot))]
# print
methods(plot)[grepl('matrix', methods(print))]
methods(plot)[grepl('function', methods(print))]
methods(plot)[grepl('default', methods(print))]
# summary
methods(plot)[grepl('matrix', methods(summary))]
methods(print)
# print
methods(plot)[grepl('matrix', methods(print))]
# print
methods(plot)[grepl('matrix', methods(print))]
methods(plot)[grepl('matrix', methods(summary))]
methods(plot)[grepl('matrix', methods(plot))]
methods(summary)
methods(plot)[grepl('matrix', methods(plot))]
# function
methods(plot)[grepl('function', methods(print))]
methods(plot)[grepl('function', methods(summary))]
methods(plot)[grepl('function', methods(plot))]
# function
methods(plot)[grepl('function', methods(print))]
methods(print)
grepl("matrix", meths)
grepl("function", meths)
# function
methods(plot)[grepl('function', methods(print))]
methods(plot)[grepl('function', methods(summary))]
methods(plot)[grepl('function', methods(plot))]
# default
methods(plot)[grepl('default', methods(print))]
methods(plot)[grepl('default', methods(summary))]
methods(plot)[grepl('default', methods(plot))]
# default
methods(plot)[grepl('default', methods(print))]
# default
methods(plot)[grepl('default', methods('print'))]
# matrix
methods(plot)[grepl('matrix', methods('print'))]
# function
methods(plot)[grepl('function', methods("print"))]
f <- function(y) {
y <- x + y
y
}
g <- function(x) {
y <- f(x)
f <- function(x) {
y - x
}
y - f(x)
}
x <- 10
y <- 1
f(x); f(y)
g(x); g(y)
x; y
f(x); f(y)
f(x)
f(x); f(y)
g(x); g(y)
x; y
f(x); f(y)
g(x); g(y)
x; y
m1 <- function(x, y) {
m <- matrix(0, length(x), length(y))
for (i in 1:length(x))
for (j in 1:length(y)) {
m[i, j] = x[i] * y[j]
}
m
}
m2 <- function(x, y) {
vapply(y, function(i) i * x, numeric(length(x)))
}
m3 <- function(x, y) x %o% y
x <- rnorm(100)
y <- runif(1000)
all.equal(m1(x, y), m2(x, y))
all.equal(m2(x, y), m3(x, y))
sort(by(tests$time, tests$expr, min))
results <- microbenchmark(m1(x, y), m2(x, y), m3(x, y))
sort(by(results$time, results$expr, mean))
results <- microbenchmark(m1(x, y), m2(x, y), m3(x, y))
library(microbenchmark)
library("microbenchmark")
install.packages("microbenchmark")
library("microbenchmark")
options(width = 110)
read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/avianHabitat.csv")
read.csv2("https://raw.githubusercontent.com/tonytonov/Rcourse/master/avianHabitat.csv")
read.csv2("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
df <- read.csv2("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
View(df)
df <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
View(df)
View(df)
df %>% group_by(Site)
df$Site %>% unique()
df %>% group_by(Site)
df$Site %>% unique()
library(dplyr)
library(stringr)
avian <- read.csv('avianHabitat.csv')
avian <- read.csv('https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv')
avian %>%
select(Site, Observer, contains("Ht"))
avian %>%
select(Site, Observer, contains("Ht")) %>%
mutate(Site = factor(str_replace(Site, "[:digit:]+", "")))
avian %>%
select(Site, Observer, contains("Ht"))
avian %>%
select(Site, Observer, contains("Ht")) %>%
mutate(Site = factor(str_replace(Site, "[:digit:]+", "")))
avian %>%
select(Site, Observer, contains("Ht")) %>%
mutate(Site = factor(str_replace(Site, "[:digit:]+", ""))) %>%
group_by(Site, Observer)
avian %>%
select(Site, Observer, contains("Ht")) %>%
mutate(Site = factor(str_replace(Site, "[:digit:]+", ""))) %>%
group_by(Site, Observer) %>%
summarise_if(is.numeric, funs(sum(.>0)))
result <- df %>%
select(Site, Observer, contains("Ht")) %>%
transform(Site = as.factor(sub("\\d+","",.$Site))) %>%
group_by(Site, Observer) %>%
summarise_each(funs(sum(.>0)))
result <- df %>%
select(Site, Observer, contains("Ht")) %>%
transform(Site = as.factor(sub("\\d+","",.$Site))) %>%
group_by(Site, Observer) %>%
across(funs(sum(.>0)))
View(result)
result
