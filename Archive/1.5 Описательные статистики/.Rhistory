# v1
air <- subset(airquality, Month%in%c(7, 8, 9))
result <- aggregate(air$Ozone ~ Month, air, length)
air
result
describe(iris)['sd'] # v2
describe(iris)$sd # не очень понятно, что к чему относитися
install.packages('psych')
install.packages('ggplot2')
library(psych)
describe(iris)['sd'] # v2
describe(iris)$sd # не очень понятно, что к чему относитися
sd(iris) # v3
subset(describe(iris), select = sd) # v4
describe(iris) # v5
describe(iris[,-c(5)])["sd"] # v6
describe(iris)['sd'] # v2
describe(iris)$sd # не очень понятно, что к чему относитися
sd(iris) # v3
subset(describe(iris), select = sd) # v4
describe(iris) # v5
describe(iris[,-c(5)])["sd"] # v6
for (v in 1:4) {sd_v[v] <-  sd(iris[,v])} # v7
# v8
z <- describe(x = iris[1:4], fast = T)
zz <- subset(z, select = sd)
# v9
sapply(iris[1:4], sd)
aggregate(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ 1, iris, sd)
iris
# v2
aggregate(x= iris[-5], by = list(iris$Species), FUN=median)
names(sort(aggregate(x= iris[-5], by = list(iris$Species), FUN=median)[3,-1], dec=T))
# v3
names(sort(aggregate(. ~ Species, iris[iris$Species =='virginica',], median), d=T))
aggregate(. ~ Species, iris[iris$Species =='virginica',], median), d=T)
aggregate(. ~ Species, iris[iris$Species =='virginica',], median)
aggregate(. ~ Species, iris[iris$Species], median
aggregate(. ~ Species, iris[iris$Species], median
aggregate(. ~ Species, iris[iris$Species], median)
aggregate(. ~ Species, iris[iris$Species], median)
aggregate(. ~ Species, Species, median)
iris
aggregate(. ~ Species, iris$Species, median)
aggregate(. ~ Species, median)
aggregate(. ~ iris$Species, median)
# v3
names(sort(aggregate(. ~ Species, iris[iris$Species =='virginica',], median), d=T))
aggregate(x= iris[-5], by = list(iris$Species), FUN=median)
aggregate(x= iris[-5], by = list(iris$Species), FUN=median)[3,-1]
sort(aggregate(x= iris[-5], by = list(iris$Species), FUN=median)[3,-1], dec=T)
names(sort(aggregate(x= iris[-5], by = list(iris$Species), FUN=median)[3,-1], dec=T))
aggregate(. ~ Species, iris[iris$Species =='virginica',], median)
# v3
names(sort(aggregate(. ~ Species, median), d=T))
# v3
names(sort(aggregate(. ~ Species, median), d=T))
aggregate(. ~ Species, median)
aggregate(x= iris[-5], by = list(iris$Species), FUN=median)
sort(aggregate(x= iris[-5], by = list(iris$Species), FUN=median)[3,-1], dec=T)
sort(aggregate(x= iris[-5], by = list(iris$Species), FUN=median))
#### Шаг 15 из 15. Задача ####
# В переменной my_vector сохранен вектор с пропущенными значениями. Вам нужно создать новый вектор fixed_vector,
# в котором все пропущенные значения вектора my_vector будут заменены на среднее значение по имеющимся наблюдениям.
# При этом исходный вектор оставьте без изменений!
# Напоминаю, переменная my_vector уже создана, сразу начинайте работать с ней.
# Перед тем, как сдавать решение, вы можете потренироваться на различных примерах.
# Ниже небольшой код, который может создать случайный вектор (выборка из нормального распределения) с пропущенными значениями.
my_vector <- rnorm(30)
my_vector[sample(1:30, 10)] <- NA # на десять случайных позиций поместим NA
my_vector
# Задача для самостоятельной работы:
# Изучите справку по функции replace. Вызвать справку можно исполнив команду:
?replace
fixed_vector <- replace(my_vector, mean(my_vector, na.rm = T))
fixed_vector <- replace(my_vector, is.na(my_vector) mean(my_vector, na.rm = T))
fixed_vector <- replace(my_vector, is.na(my_vector), mean(my_vector, na.rm = T))
fixed_vector
fixed_vector <- replace(my_vector, is.na(my_vector), mean(my_vector, na.rm = T), digits = 1)
