} else if (a < 0) {
print('negative')
} else print('zero')
print(i)
for (i in 1:100) {
print(i)
}
### for + if
for (i in 1:nrow(mydata)) {
if (mydata$gender[i] == 'male') {
print(mydata$score[i])
}
}
View(mydata)
for (i in 1:nrow(mydata)) {
if (mydata$score[i] > 4){
mydata$quality[i] <- 'good'
} else mydata$quality[i] <- 'bad'
}
?rep
mydata$quality <- ?rep(NA, nrow(mydata))
for (i in 1:nrow(mydata)) {
if (mydata$score[i] > 4){
mydata$quality[i] <- 'good'
} else mydata$quality[i] <- 'bad'
}
mydata$quality <- rep(NA, nrow(mydata))
for (i in 1:nrow(mydata)) {
if (mydata$score[i] > 4){
mydata$quality[i] <- 'good'
} else mydata$quality[i] <- 'bad'
}
mydata$quality2 <- ifelse(mydata$score > 4, 'good', 'bad')
ifelse(mydata$score > 4, 'good', 'bad')
mydata$score > 4
while (i < 51) {
print(mydata$score[i])
i <- i + 1
}
i <- 1
while (i < 51) {
print(mydata$score[i])
i <- i + 1
}
View(mydata)
mtcars
mtcars <- mtcars
mtcars$new_var <- for(i in 1:nrow(mtcars)){
if (mtcars$carb[i] >= 4 | mtcars$cyl >6) {
mtcars$new_var[i] <- '1'
} else mtcars$new_var[i] <- '0'
}
View(mtcars)
for(i in 1:nrow(mtcars)){
if (mtcars$carb[i] >= 4 | mtcars$cyl >6) {
mtcars$new_var[i] <- '1'
} else mtcars$new_var[i] <- '0'
}
for(i in 1:nrow(mtcars)){
if (mtcars$carb[i] => 4 | mtcars$cyl > 6) {
mtcars$new_var[i] <- '1'
} else mtcars$new_var[i] <- '0'
}
for(i in 1:nrow(mtcars)){
if (mtcars$carb[i] >= 4 | mtcars$cyl > 6) {
mtcars$new_var[i] <- '1'
} else mtcars$new_var[i] <- '0'
}
mtcars$new_var <- ifelse(mtcars$carb >= 4 | mtcars$cyl > 6, 'good', 'bad')
mtcars$new_var <- ifelse((mtcars$carb >= 4 | mtcars$cyl > 6), '1', '0')
# Вариант 2
mtcars$new_var1 <- rep(NA, nrow(mtcars))
for (i in 1:nrow(mtcars)) {
if (mtcars$carb[i] >= 4) {
mtcars$new_var[i] <- 1
} else if (mtcars$cyl[i] >6){
mtcars$new_var[i] <- 1
} else mtcars$new_var[i] <- 0}
# Вариант 2
mtcars$new_var1 <- rep(NA, nrow(mtcars))
for (i in 1:nrow(mtcars)) {
if (mtcars$carb[i] >= 4) {
mtcars$new_var[i] <- 1
} else if (mtcars$cyl[i] >6){
mtcars$new_var[i] <- 1
} else mtcars$new_var[i] <- 0}
# Вариант 2
for (i in 1 : ncol(mtcars)){
if (mtcars$carb[i] >= 4  |  mtcars$cyl[i] > 6){
mtcars$new_var1[i] = 1
}
else mtcars$new_var1[i] = 0
}
# Вариант 2
for (i in 1:ncol(mtcars)){
if (mtcars$carb[i] >= 4  |  mtcars$cyl[i] > 6){
mtcars$new_var1[i] = 1
}
else mtcars$new_var1[i] = 0
}
# Вариант 2
for (i in 1:nrow(mtcars)){
if (mtcars$carb[i] >= 4  |  mtcars$cyl[i] > 6){
mtcars$new_var1[i] = 1
}
else mtcars$new_var1[i] = 0
}
# Вариант 3
mtcars$new_var2 <- rep(NA, nrow(mtcars))
for (i in 1:nrow(mtcars)) {
if (mtcars$carb[i] >= 4) {
mtcars$new_var[i] <- 1
} else if (mtcars$cyl[i] >6){
mtcars$new_var[i] <- 1
} else mtcars$new_var[i] <- 0}
View(mtcars)
# Вариант 3
mtcars$new_var2 <- rep(NA, nrow(mtcars))
for (i in 1:nrow(mtcars)) {
if (mtcars$carb[i] >= 4) {
mtcars$new_var2[i] <- 1
} else if (mtcars$cyl[i] >6){
mtcars$new_var2[i] <- 1
} else mtcars$new_var2[i] <- 0}
### Step 6 из 8
? AirPassengers
str(AirPassengers)
ap <- AirPassengers
View(ap)
data.frame(AirPassengers)
ap <- data.frame(AirPassengers)
View(ap)
str(AirPassengers)
ap[1]
AirPassengers[2]
as.vector(AirPassengers)
for (AirPassengers in 1:nrow(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i -1]) {
good_months <- AirPassengers[i]
}
}
for (AirPassengers in 1:144) {
if (AirPassengers[i] > AirPassengers[i -1]) {
good_months <- AirPassengers[i]
}
}
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i]
good_months
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i]
if (AirPassengers[i] > (AirPassengers[i] - 1) {
good_months <- AirPassengers[i]
}
}
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
good_months
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i +1]
good_months
good_months
for (AirPassengers in 1:144) {
as.vector(good_months) <- AirPassengers[i +1]
if (AirPassengers[i + 1] > (AirPassengers[i]) {
as.vector(good_months) <- AirPassengers[i +1]
}
}
good_months
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
for (AirPassengers in 1:144) {
as.vector(good_months) <- AirPassengers[i +1]
if (AirPassengers[i + 1] > (AirPassengers[i]) {
as.vector(good_months) <- AirPassengers[i +1]
} else 0
}
good_months
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
as.vector(good_months)
# Вариант 3
ap <- data.frame(AirPassengers)
ap$AirPassengers <- rep(NA, nrow(ap))
View(ap)
# Вариант 3
ap <- data.frame(AirPassengers)
ap$good_months <- rep(NA, nrow(ap))
View(ap)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
AirPassengers
AirPassengers
str(AirPassengers)
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
AirPassengers
View(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
View(ap)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
remove(list = ls())
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
View(AirPassengers)
# Вариант 1
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i + 1]
good_months
AirPassengers
View(AirPassengers)
remove(list = ls())
View(AirPassengers)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
str(AirPassengers)
?AirPassengers
View(AirPassengers)
str(AirPassengers)
ap <- AirPassengers
ap <- data.frame(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
View(AirPassengers)
remove(list = ls())
remove(list = ls())
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700, 560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
x^2
x <- c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700) # Баллы за речь
sum(x) # Сумма баллов за речь
x_sq <- x^2 # Сумма баллов за речь
sum_x_sq <- sum(x_sq)
x^2
c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2)
sum(x_sq)
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
y^2
y <- c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750) # Баллы за математику
sum(y) # Сумма баллов за математику
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2 # Квадраты баллов за математику
y_sq <- y^2 # Квадраты баллов за математику
y^2
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
sum(c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
sum(y_sq)
sum(x - mean(x))
sum((x - mean(x))^2)
sum((y-mean(y))^2)
sum((x - mean(x)) * sum(y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
ssxy/sqrt(ssx * ssy)
ssxy <- sum((x - mean(x)) * (y - mean(y)))
ssx  <- sum((x - mean(x))^2)
ssy  <- sum((y-mean(y))^2)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor.test(x, y)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor(x, y, method = "pearson")
cor(x, y, method = "pearson", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen"))
cor(x, y, method = c("pearson", "kendall", "spearmen"))
?cor
cor(x, y, method = c("pearson", "kendall", "spearman"))
cor(x, y, method = c("pearson", "kendall", "spearman"))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
t.test(cor.test(x, y))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
?t.test
t = r*sqrt(n - 2)/sqrt(1 - r^2)
t
cor.test(x, y)
r*sqrt(n - 2)/sqrt(1 - r^2)
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
n <- 10
t = r*sqrt(n - 2)/sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
r
sqrt(n - 2)
sqrt(4)
sqrt(n - 2)
[1] 2.828427
2.828427*0.8702621
r*sqrt(n - 2)
sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
2.461473/0.492589
2.46/0.49
r*sqrt(n - 2)/sqrt(1 - r^2)
0.87 * sqrt(10 - 2)/sqrt(1 - 0.87^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
0.84^2
0.11^2
- 0.28^2
-0.28^2
0.28^2
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
remove(ls = list())
remove(list = ls())
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
iq <- c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)
table_7.2 <- data.frame(student, height_inch, iq)
View(table_7.2)
cor.test(height_inch, iq)
0.1347945 * sqrt(10 - 2)/sqrt(1 - 0.1347945^2)
# 3) Рассситайте коэффициент детерминации и проанализируйте результаты
0.1347945^2
0.1347945^2
# альтернативный способ
ssx <- sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch))
sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
sum(iq - mean(iq))
sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssx <- sum(height_inch - mean(height_inch))
ssx <- sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
ssy <- sum(iq - mean(iq))
ssy <- sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssxy <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
r = ssxy/sqrt(ssx * ssy)
r
r <- ssxy/sqrt(ssx * ssy)
r
cor.test(height_inch, iq)
ssxy
ssx
ssy
ssy
r <- 24.5/sqrt(5.684342e-14 * 0)
r
cor.test(height_inch, iq)
ssxy
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(height_inch - mean(height_inch))
sum((height_inch - mean(height_inch))^2)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
sum(
(
iq - mean(iq)
)^2
)
sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssx
ssx <- sum(
(
height_inch - mean(height_inch)
)^2
)
ssx <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
# ssy
ssy <- sum(
(
iq - mean(iq)
)^2
)
ssy <- sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssxy
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq))) # 24.5
ssxy/sqrt(ssx * ssy)
r <-  ssxy/sqrt(ssx * ssy)
r
ssxy
ssx
ssy
24.5/sqrt(124.9 * 264.5)
ssxy/sqrt(ssx * ssy)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
n <- 10
t <-  r * sqrt(n - 2)/sqrt(1 - r^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
sum(height_inch)
sum(height_inch^2)
sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
remove(list = ls())
getwd()
setwd("/Users/zelimkhan/Desktop/Data/GitHub/Spatial_Analysis/")
read.csv("2022.04.30_city")
read.csv("2022.04.30_city.csv")
read.csv2("2022.04.30_city.csv")
read.csv2("2022.04.30_city.csv")
read.csv2("2022.04.30 Показатели городов РФ 1.xlsx")
read.csv2("city.csv")
read.csv2("city.xlsx")
read.csv2("yt.csv")
read.csv2("city.csv")
read.csv2("city.xlsx")
install.packages("readxl")
library(ape)
read.csv2("city.xlsx")
read.csv2("yt.csv")
