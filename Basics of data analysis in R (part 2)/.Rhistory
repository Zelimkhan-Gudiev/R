}
apply(d, 2, find_positive)
#### Step 9 of 16  ####
# Давайте рассмотрим один небольшой пример работы с функцией mapply. Я оговорился, что она довольно специфична, однако иногда она все-таки
# оказывается довольно полезной.
# Допустим у нас есть матрица размером 100 на 200:
m <- matrix(rnorm(100 * 200), nrow = 100)
m
# И мы хотим присвоить имена строчкам и столбикам в этой матрице по принципу:
# row_1, row_2, row_3, ..., row_100 - для строк
# col_1, col_2, col_3, ..., col_200 - для колонок
# Тогда мы могли бы сгенерировать список данными именами следующим образом:
m_names <- mapply(paste, list("row", "col"), list(1:100, 1:200), sep = "_")
m_names
View(m_names)
View(m_names)
#### Step 10 of 16  ####
# Хотелось бы рассмотреть еще один подводный камень применения функций семейства apply к dataframe.
# Предположим, мы решили написать простенькую функцию для расчета стандартного отклонения количественных переменных в данных.
get_sd <- function(x){
num_var <- sapply(x, is.numeric)
sapply(x[, num_var], sd)
}
# Казалось бы, все логично и работает на различных примерах:
get_sd(iris)
# Но в нашем коде скрыта серьезная уязвимость!) Предположим, у нас есть набор данных,
# в котором только одна количественная переменная:
my_df <- data.frame(x = 1:10, y = letters[1:10])
my_df
get_sd(my_df)
# Что вообще только что произошло? Дело в том, что существуют различные способы обращения к колонкам dataframe:
my_df[1] - получим dataframe
my_df[1]
my_df
my_df
# Что вообще только что произошло? Дело в том, что существуют различные способы обращения к колонкам dataframe:
my_df[1]     # получим dataframe
my_df[[1]]   # получим вектор
my_df[, 1]   # получим вектор
#### Step 11 of 16  ####
test_data
#### Step 11 of 16  ####
test_data <- as.data.frame(list(name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5",
"p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9"),
expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83)))
View(test_data)
my_names <- function (dataset, names){
dataset[sapply("HPS9", function(x) grepl(x, dataset[[1]]))]
}
names <- c('HPS1', 'GOT1')
my_names <- function (dataset, names){
grepl(dataset, names)
}
my_names(test_data, names)
my_names <- function (dataset, names){
grepl(names, dataset)
}
my_names(test_data, names)
my_names <- function (dataset, names){
as.data.frame(grepl(names, dataset))
}
my_names(test_data, names)
View(test_data)
dataset
names
dataset[sapply(names), function(x) grep(x, dataset[[1]])]
my_names <- function (dataset, names){
dataset[sapply(names), function(x) grep(x, dataset[[1]])]
}
my_names <- function (dataset, names){
dataset[sapply(names, function(x) grep(x, dataset[[1]]))]
}
my_names(test_data, names)
my_names <- function (dataset, names){
dataset[sapply(names, function(x) grepl(x, dataset[[1]]))]
}
my_names(test_data, names)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/GudievZK/Desktop/GitHub/DF/")
library(ggplot2)
library(ggplot2)
library(dplyr)
data("diamonds")
library(readxl)
yt <- read.csv2("yt.csv")
yt <- read_xlsx("plan.xlsx")
min_size <- numeric(nrow(diamonds))
for (i in 1:nrow(diamonds)) {
min_size[i] <- min(diamonds[i, 8:10])
}
getwd()
setwd("C:/Users/GudievZK/Desktop/GitHub/DF/")
# setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")#
data("diamonds")
apply(diamonds[, 8:10], 1, min)
?apply
library(data.table)
system.time(fread("/Users/zelimkhan/Desktop/Data/GitHub/DF/DataTable/products.csv"))
system.time(read.table("/Users/zelimkhan/Desktop/Data/GitHub/DF/DataTable/products.csv", header = T, sep = ";"))
system.time(read.table("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv", header = T, sep = ";"))
system.time(fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv"))
system.time(read.table("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv", header = T, sep = ";"))
products <- fread("/C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv")
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv")
View(products)
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv, encoding = "UTF-8")
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
#iris$Species
products[price > 10000]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
# step 3 data filtering
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
# step 4 data transformation
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))], 5)
# step 5 data transformation advanced
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
# step 9 of 11
filter.expensive.available <- function(products, brands) {
}
# step 10 of 11
# step 11 of 11
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv, encoding = "UTF-8")
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
#iris$Species
products[price > 10000]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
# step 3 data filtering
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
# step 4 data transformation
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))], 5)
# step 5 data transformation advanced
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
# step 9 of 11
filter.expensive.available <- function(products, brands) {
}
# step 10 of 11
# step 11 of 11
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv)
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
#iris$Species
products[price > 10000]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
# step 3 data filtering
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
# step 4 data transformation
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))], 5)
# step 5 data transformation advanced
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
# step 9 of 11
filter.expensive.available <- function(products, brands) {
}
# step 10 of 11
# step 11 of 11
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv)
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
#iris$Species
products[price > 10000]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
# step 3 data filtering
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
# step 4 data transformation
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))], 5)
# step 5 data transformation advanced
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
# step 9 of 11
filter.expensive.available <- function(products, brands) {
}
# step 10 of 11
# step 11 of 11
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv)
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
#iris$Species
products[price > 10000]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
# step 3 data filtering
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
# step 4 data transformation
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))], 5)
# step 5 data transformation advanced
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
# step 9 of 11
filter.expensive.available <- function(products, brands) {
}
# step 10 of 11
# step 11 of 11
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv")
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv", encoding = "UTF-8")
library(data.table)
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv", encoding = "UTF-8")
View(products)
# step 2 data.table vs dataframe
products[1:10, ]
products[products$price > 10000, ]
with(iris, iris[Species == "virginica", ])
products[1:10, ]
products[products$price > 10000, ]
products[products$price > 10000, ]
products[products$price > 10000, ]
products[price > 10000]
products[price > 1000 & (brand %in% c("Epson", "Apple"))]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
products[(price > 1000) & (brand %in% c("Epson", "Apple"))]
products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
products[price > 1000 & (brand %in% c("Epson", "Apple"))] == products[(price > 1000) &
(brand %in% c("Epson", "Apple"))]
products[price > 1000 & (brand %in% c("Epson", "Apple"))] == products[(price > 1000) &
(brand %in% c("Epson", "Apple"))] %>% sum()
products[price > 1000 & (brand %in% c("Epson", "Apple"))] == products[(price > 1000) &
(brand %in% c("Epson", "Apple"))] %>% table()
products[price > 1000 & (brand %in% c("Epson", "Apple"))] == products[(price > 1000) &
(brand %in% c("Epson", "Apple"))] %>% table()
products[available, ]
products[available == TRUE, ]
products[3, ]
iris[3, ]
products[3]
iris[3]
products[!(brand %in% c("Apple", "Epson"))]
products[(brand %in% c("Apple", "Epson"))]
products[!(brand %in% c("Apple", "Epson"))]
products[!(1:10)]
products[!(brand %in% c("Apple", "Epson"))]
products[1(1:10)]
products[!(1:10)]
products[, list(name,
price.1k = price / 1000)]
order(products$price, decreasing = T)
order(products$price, decreasing = T)
order(products$price, decreasing = T)
products[order(products$price, decreasing = T)]
products[order(price, decreasing = T)]
products[order(price, decreasing = T)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[oeder(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
list(name, price.1k = paste0(price / 1000, " тыс.руб))]
products[order(price, decreasing = T),
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
products[order(price, decreasing = T)]
products[order(price, decreasing = T)]
order(products$price, decreasing = T)
products[order(price, decreasing = T)]
library(data.table)
library(data.table)
products <- fread("C:/Users/GudievZK/Desktop/GitHub/DF/1.7_Stepic_DataTable/products.csv", encoding = "UTF-8")
products[order(price, decreasing = T),
products[order(price, decreasing = T)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " тыс.руб"))]
products[order(price, decreasing = T), list(name, price.1k = price / 1000)]
products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " тыс.руб"))]
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " тыс.руб"))], 5)
head(products[order(price, decreasing = T),
list(name, price.1k = paste0(price / 1000, " тыс.руб"))])
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " С‚С‹СЃ.СЂСѓР±"))]$price.1k
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " тыс.руб"))]$price.1k
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " тыс.руб"))]$price.1k
products[order(price, decreasing = T),
list(price.1k = paste0(price / 1000, " тыс.руб"))]$price.1k
products[, list(name, price)]
products[, .(name, price)]
products[, c("name", "price"), with = F]
products[, c("name", "price"), with = F]
products[, c("name", "price"), with = F]
products[order(-price), .(name = head(name),
price = head(price))]
products[, .(price = sum(price))]
products[, list(name.with.brand = paste0(brand, " - ", name))]
a <- products[, list(name.with.brand = paste0(brand, " - ", name))]
a[order(name.with.brand)]
a[order(name.with.brand)]
products[, list(name.with.brand = paste0(brand, " - ", name))][order(name.with.brand)]
products[, .(price = {
a <- mean(price)
b <- median(price)
c(min(price), max(price), a/b)
})]
products[, .(price = {
a <- mean(price)
})]
b - median(price)
products[, .(price = {
a <- mean(price)
b - median(price)
})]
products[, .(price = {
a <- mean(price)
b <-  median(price)
})]
products[, .(price = {
a <- mean(price)
b <-  median(price)
})]
products[, .(price = {
a <- mean(price)
})]
products[, .(price = {
b <-  median(price)
})]
products[, .(price = {
a <- mean(price)
b <-  median(price)
})]
products[, .(price = {
b <-  median(price)
a <- mean(price)
})]
c(min(price), max(price), a/b)
products[, .(price = {
a <- mean(price)
b <-  median(price)
c(min(price), max(price), a/b)
})]
products[, .(mean.price = mean(price)), by = brand]
products[order(-price), .(name = head(name, 3),
price = head(price, 3)), by = brand]
a <- products[order(-price), .(name = head(name, 3),
price = head(price, 3)), by = brand]
View(a)
levels(products$brand)
levels(as.factor(products$brand)
levels(as.factor(products$brand)
levels(as.factor(products$brand))
unique(products$brand)
unique(products$brand) %>% sum()
library(dplyr)
unique(products$brand) %>% sum()
unique(products$brand)
unique(products$brand) %>% table()
unique(products$brand) %>% nrow()
unique(products$brand) %>% length()
4240*3
