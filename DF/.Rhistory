ap <- data.frame(AirPassengers)
View(ap)
str(AirPassengers)
ap[1]
AirPassengers[2]
as.vector(AirPassengers)
for (AirPassengers in 1:nrow(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i -1]) {
good_months <- AirPassengers[i]
}
}
for (AirPassengers in 1:144) {
if (AirPassengers[i] > AirPassengers[i -1]) {
good_months <- AirPassengers[i]
}
}
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i]
good_months
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i]
if (AirPassengers[i] > (AirPassengers[i] - 1) {
good_months <- AirPassengers[i]
}
}
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
good_months
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i +1]
good_months
good_months
for (AirPassengers in 1:144) {
as.vector(good_months) <- AirPassengers[i +1]
if (AirPassengers[i + 1] > (AirPassengers[i]) {
as.vector(good_months) <- AirPassengers[i +1]
}
}
good_months
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
for (AirPassengers in 1:144) {
as.vector(good_months) <- AirPassengers[i +1]
if (AirPassengers[i + 1] > (AirPassengers[i]) {
as.vector(good_months) <- AirPassengers[i +1]
} else 0
}
good_months
good_months<-c()
for (i in 1:(length(AirPassengers)-1)) {
if (AirPassengers[i+1]>AirPassengers[i]) {
good_months<-append(good_months,AirPassengers[i+1])
}
}
as.vector(good_months)
# Вариант 3
ap <- data.frame(AirPassengers)
ap$AirPassengers <- rep(NA, nrow(ap))
View(ap)
# Вариант 3
ap <- data.frame(AirPassengers)
ap$good_months <- rep(NA, nrow(ap))
View(ap)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
AirPassengers
AirPassengers
str(AirPassengers)
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
AirPassengers
View(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
View(ap)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
remove(list = ls())
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
View(AirPassengers)
# Вариант 1
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i + 1]
good_months
AirPassengers
View(AirPassengers)
remove(list = ls())
View(AirPassengers)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
str(AirPassengers)
?AirPassengers
View(AirPassengers)
str(AirPassengers)
ap <- AirPassengers
ap <- data.frame(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
View(AirPassengers)
remove(list = ls())
remove(list = ls())
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700, 560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
x^2
x <- c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700) # Баллы за речь
sum(x) # Сумма баллов за речь
x_sq <- x^2 # Сумма баллов за речь
sum_x_sq <- sum(x_sq)
x^2
c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2)
sum(x_sq)
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
y^2
y <- c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750) # Баллы за математику
sum(y) # Сумма баллов за математику
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2 # Квадраты баллов за математику
y_sq <- y^2 # Квадраты баллов за математику
y^2
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
sum(c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
sum(y_sq)
sum(x - mean(x))
sum((x - mean(x))^2)
sum((y-mean(y))^2)
sum((x - mean(x)) * sum(y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
ssxy/sqrt(ssx * ssy)
ssxy <- sum((x - mean(x)) * (y - mean(y)))
ssx  <- sum((x - mean(x))^2)
ssy  <- sum((y-mean(y))^2)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor.test(x, y)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor(x, y, method = "pearson")
cor(x, y, method = "pearson", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen"))
cor(x, y, method = c("pearson", "kendall", "spearmen"))
?cor
cor(x, y, method = c("pearson", "kendall", "spearman"))
cor(x, y, method = c("pearson", "kendall", "spearman"))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
t.test(cor.test(x, y))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
?t.test
t = r*sqrt(n - 2)/sqrt(1 - r^2)
t
cor.test(x, y)
r*sqrt(n - 2)/sqrt(1 - r^2)
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
n <- 10
t = r*sqrt(n - 2)/sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
r
sqrt(n - 2)
sqrt(4)
sqrt(n - 2)
[1] 2.828427
2.828427*0.8702621
r*sqrt(n - 2)
sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
2.461473/0.492589
2.46/0.49
r*sqrt(n - 2)/sqrt(1 - r^2)
0.87 * sqrt(10 - 2)/sqrt(1 - 0.87^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
0.84^2
0.11^2
- 0.28^2
-0.28^2
0.28^2
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
remove(ls = list())
remove(list = ls())
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
iq <- c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)
table_7.2 <- data.frame(student, height_inch, iq)
View(table_7.2)
cor.test(height_inch, iq)
0.1347945 * sqrt(10 - 2)/sqrt(1 - 0.1347945^2)
# 3) Рассситайте коэффициент детерминации и проанализируйте результаты
0.1347945^2
0.1347945^2
# альтернативный способ
ssx <- sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch))
sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
sum(iq - mean(iq))
sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssx <- sum(height_inch - mean(height_inch))
ssx <- sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
ssy <- sum(iq - mean(iq))
ssy <- sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssxy <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
r = ssxy/sqrt(ssx * ssy)
r
r <- ssxy/sqrt(ssx * ssy)
r
cor.test(height_inch, iq)
ssxy
ssx
ssy
ssy
r <- 24.5/sqrt(5.684342e-14 * 0)
r
cor.test(height_inch, iq)
ssxy
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(height_inch - mean(height_inch))
sum((height_inch - mean(height_inch))^2)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
sum(
(
iq - mean(iq)
)^2
)
sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssx
ssx <- sum(
(
height_inch - mean(height_inch)
)^2
)
ssx <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
# ssy
ssy <- sum(
(
iq - mean(iq)
)^2
)
ssy <- sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssxy
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq))) # 24.5
ssxy/sqrt(ssx * ssy)
r <-  ssxy/sqrt(ssx * ssy)
r
ssxy
ssx
ssy
24.5/sqrt(124.9 * 264.5)
ssxy/sqrt(ssx * ssy)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
n <- 10
t <-  r * sqrt(n - 2)/sqrt(1 - r^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
sum(height_inch)
sum(height_inch^2)
sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
remove(list = ls())
mydata <-  read.csv("/Users/zelimkhan/Desktop/evals.csv") # не работает
mydata <- read.csv('evals.csv')
#### Data preparation (Подготовка данных) _____________________________________________________________________________________________________ ####
getwd()
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")
mydata <-  read.csv("/Users/zelimkhan/Desktop/evals.csv") # не работает
mydata <- read.csv('evals.csv')
yt <- read.csv2('yt.csv') # Отступление
# два варианта
if (a > 0) { # 1) принимает на вход условие if (a > 0); 2) затем проверяет выполняется ли данное условие;
print('positive') # 3) если выполняестя, то выполняет некоторую комманду print('positive');
} else('not positive') # 4) если условие не выполняется то выполняет другую комманду else('not positive');
# принимает на вход условие (одно логическое значение), что выдает на выходе TRUE or FALSE
# оператор if: 1) принимает на вход условие; 2) затем проверяет выполняется ли данное условие;
# 3) если выполняестя, то выполняет некоторую комманду; 4) если условие не выполняется то выполняет другую комманду
a <- -10
# два варианта
if (a > 0) { # 1) принимает на вход условие if (a > 0); 2) затем проверяет выполняется ли данное условие;
print('positive') # 3) если выполняестя, то выполняет некоторую комманду print('positive');
} else('not positive') # 4) если условие не выполняется то выполняет другую комманду else('not positive');
# два варианта + действие (a + 1)
if (a > 0) {
print('positive')
} else { # Если после else не использовать фигурные скобки { } то мы сможем выполнить только одно действие print('not positive'). Если хотим выполнить более одного действия, нужно использовать фигурные скобки { }
print('not positive')
print(a + 1) # + действие (a + 1)
}
# три варианта
if (a > 0) {
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
#### yt (if) __________________________________________________________________________________________________________________________________ ####
# Warning messages:
# В отличии от ifelse операторр if не позволяет работать с векторами произвольной длины.
# при выполнении нижеуказанной функции будет выдано только одно значение ("positive") для первого значения вектора a <- c(1, -1), т.е. для 1
if (yt$duration < mean(yt$duration, na.rm = T)) {
print('dur_less_than_mean')
} else if (yt$duration > mean(yt$duration, na.rm = T)) {
print('dur_more_than_mean')
} else print('dur_equal_mean')
# ifelse позволяет записать вышеуказанную конструкцию в одну строку
a <- 10
ifelse(a > 0, 'positive', 'not positive')
a <- c(1, -1) # ifelse позволяет работать с векторами произвольной длины. В данном случае длина вектора а равняется двум a <- c(1, -1)
ifelse(a > 0, 'positive', 'not positive') # в данном случае ifelse выдает два значения 'positive' и 'not positive'
# В отличии от ifelse операторр if не позволяет работать с векторами произвольной длины.
# при выполнении нижеуказанной функции будет выдано только одно значение ("positive") для первого значения вектора a <- c(1, -1), т.е. для 1
a <- c(1, -1)
if (a > 0) {
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
# В отличии от ifelse операторр if не позволяет работать с векторами произвольной длины.
# при выполнении нижеуказанной функции будет выдано только одно значение ("positive") для первого значения вектора a <- c(1, -1), т.е. для 1
a <- c(1, -1)
if (a > 0) {
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
#### yt (felse) _______________________________________________________________________________________________________________________________ ####
# error
ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean ","dur more than mean")
less_or_equal_or_more_than_mean <- ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean","dur more than mean")
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == 'dur more than mean'])
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == "dur less than mean/dur equal mean"])
mean(yt$duration, na.rm = T)
length(yt[yt$duration == 130.2266])
# v2 #
p1 <- ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other")
length(p1[p1 == "dur less than mean"])
length(p1[p1 == "other"])
p2 <- ifelse(yt$duration > mean(yt$duration, na.rm = T), "dur more than mean", "other")
length(p2[p2 == "dur more than mean"])
length(p2[p2 == "other"])
p3 <- ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
length(p3[p3 == "dur equal mean"])
length(p3[p3 == "other"])
# оператор for на вход должен получать вектор значений in 1:10
# цикл for позволяет выполнять много раз рутинную операцию (с каждым элементом вектора)
for (i in 1:10) {
print(i)
}
# for делает следующее: i пробегает значения от 1 до количества строк в дата фрейме и выводит значения yt$duration из i строки
for(i in 1:nrow(yt)) {
print(yt$duration[i])
}
for(i in 1:nrow(yt)) {
print(yt$ktd[i])
}
for (i in 1:nrow(mydata)) {
print(mydata$score[i])
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 5) {
print(yt$name[i])
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 3) {
ksk <- data.frame(yt$name[i], yt$teamleader[i], yt$numb_ret_depir[i])
}
}
View(ksk)
View(ksk)
mydata$quality <- rep(NA, nrow(mydata)) # Создадим новую переменную quality с пустыми значениями и длиной nrow(mydata).
for (i in 1:nrow(mydata)) {             # задаем вектор, который должен пробегать оператор for
if (mydata$score[i] > 4){             # задаем условия для операторра if. Проверяем в i строке mydata$score больше 4
mydata$quality[i] <- 'good'         # указываем действие, которое необходимо выполнить если условие выполнено. Если в i строке значение mydata$score больше 4, то в этой i строке в столбце mydata$quality записываем значение 'good'
} else mydata$quality[i] <- 'bad'     # указываем действие, которое необходимо выполнить если условие не выполнено. Если в i строке значение mydata$score не больше 4, то в этой i строке в столбце mydata$quality записываем значение 'bad'
}
for (i in 1:nrow(mydata)) {             # задаем вектор, который должен пробегать оператор for
if (mydata$score[i] > 4){             # задаем условия для операторра if. Проверяем в i строке mydata$score больше 4
mydata$quality[i] <- 'good'         # указываем действие, которое необходимо выполнить если условие выполнено. Если в i строке значение mydata$score больше 4, то в этой i строке в столбце mydata$quality записываем значение 'good'
} else mydata$quality[i] <- 'bad'     # указываем действие, которое необходимо выполнить если условие не выполнено. Если в i строке значение mydata$score не больше 4, то в этой i строке в столбце mydata$quality записываем значение 'bad'
}
View(mydata)
View(yt)
yt$quality <- rep(NA, nrow(yt))
for (i in 1:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur more than mean"
} else if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur less than mean"
} else yt$quality[i] <- "dur equal mean"
}
#
length(yt$quality[yt$quality == "dur more than mean"])
length(yt$quality[yt$quality == "dur less than mean"])
length(yt$quality[yt$quality == "dur equal mean"])
# С помощью ifelse можно выполнить все вышеуказанное в одну строчку
mydata$quality2 <- ifelse(mydata$score > 4, 'good', 'bad') # mydata$score > 4 проверяет в каждой (i) строке mydata$score больше 4
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1                # если i < 51, то добавляем 1 к i (i + 1) и так до тех пор пока (i < 51)
}
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1                # если i < 51, то добавляем 1 к i (i + 1) и так до тех пор пока (i < 51)
}
