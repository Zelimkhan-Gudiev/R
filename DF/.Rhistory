my_var1 <- 42
my_var2 <- 35.25
my_var1 + 100
my_var1
my_var1 + my_var2 - 12
my_var3 <- my_var1^2 + my_var2^2
my_var3 > 200
my_var3 > 30099
my_var1 == my_var2
my_var1 != my_var2
my_new_var <- my_var1 == my_var2
1 : 67
my_vector1 <- 1:67
my_vector2 <- c(-32, 45, 67, 12.78, 129, 0, -65)
my_vector1[1]
my_vector1[3]
my_vector2[2]
my_vector2[c(1,2,3)]
1:3
my_vector2[1:3]
my_vector2[c(1,5,6,7,10)]
my_vector1 + 10
my_vector2 + 56
my_vector2 == 0
my_vector1 > 30
x <- 23
my_vector1 > 23
my_vector1 > x
x == 23
my_vector2 > 0
my_vector2[my_vector2 > 0]
my_vector2[my_vector2 < 0]
my_vector2[my_vector2 == 0]
my_vector1[my_vector1 > 20 & my_vector1 < 30]
positive_numbers <- my_vector2[my_vector2 > 0]
my_vector2
positive_numbers
v1 <-  c(165, 178, 180, 181, 167, 178, 187, 167, 187)
mean_v1 <- mean(v1)
mean_v1
v1[v1 > mean_v1]
greater_than_mean <- v1[v1 > mean_v1]
greater_than_mean
age <- c(16, 18, 22, 27)
is_maried <- c(F, F, T, T)
name <- c("Olga", "Maria", "Nastya", "Polina")
data <- list(age, is_maried, name)
View(data)
data
View(data)
data[[1]][1]
View(data)
data[[2]][3]
df <- data.frame(Name = name, Age = age, Status = is_maried)
View(df)
head(df)
typeof(df)
mydata <- read.csv('evals.csv')
source("~/Desktop/Data/GitHub/1.3_my_script.R")
source("~/Desktop/Data/GitHub/1.3_my_script.R")
is_maried  <- c(F, F, T, T)
name  <- c("Olga", "Maria", "Nastya", "Polina")
age  <- c(16, 18, 22, 27)
my_data  <- data.frame(Name = name, Age = age, Status = is_maried)
View(my_data)
typeof(my_data) # list, т.к. данный дф содержит данные разного типа
remove(list = ls())
my_data <- read.csv('https://stepik.org/media/attachments/lesson/11481/evals.csv')
yt <- read.csv2("yt.csv")
setwd("~/Desktop/Data/GitHub/DF")
yt <- read.csv2("yt.csv")
View(yt)
View(yt)
head(my_data) # комманда head по умолчанию выводит шесть первых строк
head(my_data, 7) # через запятую можно указать сколько строк выводить
tail(my_data) # комманда tail по умолчанию выводит шесть последних строк
tail(my_data, 7) # через запятую можно указать сколько строк выводить
View(my_data) # функция View позволяет увидеть 1000 наблюдений (строк)
str(my_data) # показывает внутреннюю структуру объекта R
summary(my_data) # показывает некоторые сводные данные (описательные статистики для кол. переменных) дата фрейма
a <- names(my_data)
names(yt)
head(yt)
summary(yt)
summary(yt$duration, yt$numb_ret_depir, yt$numb_ret_oiv) # error. I can't output summary for duration, numb_ret_depir, numb_ret_oiv
my_data$score # выводит вектор значений переменной score
b <- my_data$score # вектор значений можно присвоить объектьу b
mean(my_data$score) # т.к. переменная в дата фрейме является вектром, то с данной переменной можно выполнять все операции доступные для векторов, например, расчитать ср. значение
# например, расчитать ср. значение
summary(my_data$score) # можно применить функцию саммари для расчета описательных статистик
my_data$score*2 # можно выполнять арифметические операции
my_data$ten_point_scale <- my_data$score*2 # Если после знака $ указать не существующую переменную,
summary(my_data$ten_point_scale)
my_data$new_variable <- 0 # создадим новую переменную, все значения которой содержат нули
my_data$number <- 1:nrow(my_data) # создадим новую переменную, содержащую порядкоый номер строки (наблюдения).
# Номер строки задается вектором значений "1:nrow(my_data)" от "1" до количество количества строк в my_data
summary(my_data$number)
nrow(my_data) # возвращает количество строк в дата фрейме
ncol(my_data) # возвращает количество столбцов в дата фрейме
yt$teamleader
my_data$score[1:10] # обращение к первым десяти значениям переменной (вектора) my_data$score с помошью индекс [ ]
# индексы [ ] можно задавать разными способоми. В индексе [ ] можно указывать вектор или логическое значение и т.д.
my_data[1,1] # т.к. дата фрейм является двумерным объектом, то можно обратиться к любому его элементу указав два индекса.
my_data[c(2,193,225),1] # в идексе до запятой указываются строки, а после запятой столбцы
my_data[101:200,1]
my_data[5,] # если не указать индекс переменной, то это значит, что для нам не важен и мы хотим посмотреть значения всех переменных. С помощью данной строки мы обращаемся к пятой строке нашего дата фрейма со всеми столбцами.
# Вектор "my_data[,1]" полностью повторяет значения my_data$score
my_data[,1] == my_data$score # Вектор "my_data[,1]" полностью повторяет значения my_data$score
my_data[,2:5] # Также как и строки можно вызывать столбцы
View(my_data[,2:5])
View(head(my_data[,2:5]))
yt$ktd[1:10]
yt[1, 3]
yt[c(1:5), c(2,3)]
View(yt[])
View(yt[c(1:5), c(2,3)])
my_data$gender # обратимя к переменной my_data$gender
my_data$gender == 'female' # проверим каким строкам (наблюдений) соответствуют значение 'female'. Комманда my_data$gender на выходе дает логический вектор из FALSE и TRUE
# попрубуем использовать данные знания для обращения к конкретным значениям дата фрейма
my_data[,1] # если мы выполним данную комманду мы получим все значения первого столбца, т.к. мы пропустили индекс строки
# но мы можем использовать логический вектор для обращения к части данных
my_data[my_data$gender =='female', 1] # если в качестве индекса строки указать логиический вектор, то мы получим только те значения первого столбца, значения строк которых отвечает требованиям my_data$gender =='female'
# значения первого столбца, значения строк которых отвечает требованиям my_data$gender =='female'
my_data[my_data$gender == 'female', 1:3] # можно обращаться к любому количеству столбцов, например к первым трем стобцам
View(my_data[my_data$gender == 'female', c(1:3)])
yt[yt$duration > mean(yt$duration), 3]
yt[yt$duration > mean(yt$duration), c(1:3)]
View(yt)
yt[yt$deputy == "Гудиев Зелимхан Куйраевич", 3]
yt[yt$duration > mean(yt$duration), 3]
yt[yt$duration >= mean(yt$duration), 3]
#### yt (Subsetting with condition (обращение к конкретным кусочкам данных, которые отвечают условиям)) ______________________________________ ####
mean(yt$duration)
mean(yt$duration)
mean(yt$duration, na.rm = T)
yt[yt$duration > mean(yt$duration, na.rm = T), 3]
yt[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), 3]
View(yt[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), 3])
View(yt[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), 3])
[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), 3]
yt[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), 3]
View(yt[yt$deputy == "Гудиев Зелимхан Куйраевич" & yt$duration > mean(yt$duration, na.rm = T), c(1:3)])
# В R есть функция, которая позволяет нам обращается к .. данным без индексации
subset(my_data, gender == 'female') # в качестве условия указана факторная перменная gender
subset(yt, deputy == 'Гудиев Зелимхан Куйраевич')
View(subset(yt, deputy == "Гудиев Зелимхан Куйраевич"))
yt$deputy
yt1 <- subset(yt, deputy == "Гудиев Зелимхан Куйраевич")
yt2 <- subset(yt, deputy == "Чурсина Мария Вячеславовна")
yt3 <- subset(yt, deputy == "Магамгазиев Расул Висхаджиевич")
yt4 <- subset(yt, deputy == "Майоров Артем Сергеевич")
yt5 <- rbind(yt1, yt2, yt3, yt4)
yt5 <- subset(yt, deputy == "")
yt6 <- rbind(yt1, yt2, yt3, yt4, yt5)
yt11 <- yt[, 1:23]
yt22 <- yt[, 24:56]
yt66 <- cbind(yt11, yt22)
yt11 <- yt[, 1:28]
yt22 <- yt[, 29:56]
yt66 <- cbind(yt11, yt22)
library(help = 'datasets') # Чтобы просмотреть весь список доступных датасетов, выполните команду library(help = "datasets")
mtcars # Команда mtcars выводит данные в консоли
data(mtcars) # Команда data(mtcars) добавит датасет в рабочую среду
help(mtcars) # Команда help(mtcars) выведет информацию о датасете (?mtcars)
mydata <- mtcars # Команда my_data <- mtcars запишет датасет в новую переменную
#### Step 7 of 11 _____________________________________________________________________________________________________________________________ ####
# В этой задче поработаем со встроенными данными mtcars. В датафрэйме mtcars создайте новую колонку (переменную)
# под названием even_gear, в которой будут единицы, если значение переменной (gear) четное, и нули если количество нечетное.
# Подсказка: вам может помочь оператор деления с остатком:5 %% 2 == 1 TRUE
# Решения
# Вариант 1
mtcars$even_gear <- ifelse (mtcars$gear %% 2 == 1, 0, 1) # если остаток деления значения переменной mtcars$gear на 2 равно 1,
mtcars$even_gear
View(mydata)
mtcars$gear
# Вариант 4
mpg_4 <- subset(mtcars, cyl == 4)$mpg
mpg_4
# Вариант 5
mpg_4 <- subset (mtcars$mpg, mtcars$cyl == '4')
yt$duration[yt$deputy = "Гудиев Зелимхан Куйраевич"]
yt$duration[yt$deputy == "Гудиев Зелимхан Куйраевич"]
sort(yt$duration[yt$deputy == "Гудиев Зелимхан Куйраевич"])
s1 <- subset(yt, deputy == "Гудиев Зелимхан Куйраевич")
s11 <- s1$duration
s11
sort(s11)
# Вариант 3
mpg_4 <- mtcars[mtcars$cyl == 4, "mpg"]
yt[yt$deputy == "Гудиев Зелимхан Куйраевич", "duration"]
sort(yt[yt$deputy == "Гудиев Зелимхан Куйраевич", "duration"])
subset(yt, deputy == "Гудиев Зелимхан Куйраевич")$duration
sort(subset(yt, deputy == "Гудиев Зелимхан Куйраевич")$duration)
subset(yt$duration, yt$deputy == "Гудиев Зелимхан Куйраевич")
sort(subset(yt$duration, yt$deputy == "Гудиев Зелимхан Куйраевич"))
ncol(yt$duration)
ncol(duration)
getColumnNumber(yt, "duration")
which(colnames(yt) == "duration")
yt[yt$deputy == "Гудиев Зелимхан Куйраевич", 55]
sort(yt[yt$deputy == "Гудиев Зелимхан Куйраевич", 55])
# yt
s1 <- subset(yt, deputy == "Гудиев Зелимхан Куйраевич")
s1$duration
sort(s1$duration)
remove(list = ls())
mydata <-  read.csv("/Users/zelimkhan/Desktop/evals.csv") # не работает
mydata <- read.csv('evals.csv')
yt <- read.csv2('yt.csv') # Отступление
1
# принимает на вход условие (одно логическое значение), что выдает на выходе TRUE or FALSE
# оператор if: 1) принимает на вход условие; 2) затем проверяет выполняется ли данное условие;
# 3) если выполняестя, то выполняет некоторую комманду; 4) если условие не выполняется то выполняет другую комманду
a <- -10
# два варианта
if (a > 0) { # 1) принимает на вход условие if (a > 0); 2) затем проверяет выполняется ли данное условие;
print('positive') # 3) если выполняестя, то выполняет некоторую комманду print('positive');
} else('not positive') # 4) если условие не выполняется то выполняет другую комманду else('not positive');
# два варианта + действие (a + 1)
if (a > 0) {
print('positive')
} else { # Если после else не использовать фигурные скобки { } то мы сможем выполнить только одно действие print('not positive'). Если хотим выполнить более одного действия, нужно использовать фигурные скобки { }
print('not positive')
print(a + 1) # + действие (a + 1)
}
# три варианта
if (a > 0) {
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
#### yt (if) __________________________________________________________________________________________________________________________________ ####
if (yt$duration < mean(yt$duration, na.rm = T)) {
print('dur_less_than_mean')
} else if (yt$duration > mean(yt$duration, na.rm = T)) {
print('dur_more_than_mean')
} else print('dur_equal_mean')
# три варианта
if (a > 0) {
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
yt$duration < mean(yt$duration, na.rm = T)
if (yt$duration < mean(yt$duration, na.rm = T)) {
print('dur_less_than_mean')
} else if (yt$duration > mean(yt$duration, na.rm = T)) {
print('dur_more_than_mean')
} else print('dur_equal_mean')
ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean ","dur more than mean")
less_or_equal_or_more_than_mean <- ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean ","dur more than mean")
less_or_equal_or_more_than_mean
less_or_equal_or_more_than_mean == dur more than mean
less_or_equal_or_more_than_mean == 'dur more than mean'
length(less_or_equal_or_more_than_mean == 'dur more than mean')
length(less_or_equal_or_more_than_mean == 'dur less than mean/dur equal mean')
length(less_or_equal_or_more_than_mean == 'dur more than mean')
length(less_or_equal_or_more_than_mean == 'dur less than mean/dur equal mean')
length(less_or_equal_or[more_than_mean{less_or_equal_or_more_than_mean == 'dur more than mean'])
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == 'dur more than mean'])
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == "dur less than mean/dur equal mean"])
length(yt[yt$duration == mean(yt$duration)])
mean(yt$duration)
length(yt[yt$duration == mean(yt$duration, na.rm = T)])
mean(yt$duration, na.rm = T)
length(yt[yt$duration == "130.2266"])
length(yt[yt$duration == 130.2266])
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == 'dur more than mean'])
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == "dur less than mean/dur equal mean"])
# v2
ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other")
length(ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other"))
# v2
p1 <- ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other")
length(p1 == "dur less than mean")
# v2
p1 <- ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other")
length(p1 == "dur less than mean")
length(p1 == "other")
ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean ","dur more than mean")
less_or_equal_or_more_than_mean <- ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean/dur equal mean","dur more than mean")
less_or_equal_or_more_than_mean
# v2
p1 <- ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean","other")
p1
length(p1 == "dur less than mean")
length(less_or_equal_or_more_than_mean[less_or_equal_or_more_than_mean == 'dur more than mean'])
# v2
p1 <- ifelse(yt$duration <= mean(yt$duration, na.rm = T), "dur less than mean","other")
p1
length(p1 == "dur less than mean")
length(p1[p1 == "dur less than mean")
length(p1[p1 == "dur less than mean"])
length(p1[p1 == "other"])
71 + 59
# v2
p1 <- ifelse(yt$duration < mean(yt$duration, na.rm = T), "dur less than mean","other")
length(p1[p1 == "dur less than mean"])
length(p1[p1 == "other"])
ifelse(yt$duration > mean(yt$duration, na.rm = T), "dur more than mean", "other")
p2 <- ifelse(yt$duration > mean(yt$duration, na.rm = T), "dur more than mean", "other")
length(p2[p2 == "dur less than mean"])
length(p2[p2 == "other"])
ifelse(yt$duration = mean(yt$duration, na.rm = T), "dur equal mean","other")
mean(yt$duration, na.rm = T)
mean <- mean(yt$duration, na.rm = T)
ifelse(yt$duration = mean, "dur equal mean","other")
ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
length(p3[p3 == "other"])
p3 <- ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
length(p3[p3 == "dur less than mean"])
length(p3[p3 == "other"])
length(p3[p3 == "dur equal mean"])
p3 <- ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
length(p3[p3 == "dur equal mean"])
length(p3[p3 == "other"])
yt$ktd[yt$duration == mean(yt$duration)]
length(p3[p3 == "dur equal mean"])
p3 <- ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
p3
length(p3[p3 == "dur equal mean"])
yt$ktd[yt$duration == mean(yt$duration, na.rm = T)]
p3 <- ifelse(yt$duration == mean(yt$duration, na.rm = T), "dur equal mean","other")
length(p3[p3 == "dur equal mean"])
# оператор for на вход должен получать вектор значений in 1:10
# цикл for позволяет выполнять много раз рутинную операцию (с каждым элементом вектора)
for (i in 1:10) {
print(i)
}
# for делает следующее: i пробегает значения от 1 до количества строк в дата фрейме и выводит значения yt$duration из i строки
for(i in 1:nrow(yt)) {
print(yt$duration)
}
for(i in 1:nrow(yt)) {
print(yt$ktd[i])
}
# for делает следующее: i пробегает значения от 1 до количества строк в дата фрейме и выводит значения yt$duration из i строки
for(i in 1:nrow(yt)) {
print(yt$duration[i])
}
for(i in 1:nrow(yt)) {
print(yt$ktd[i])
}
for (i in 1:nrow(mydata)) {
print(mydata$score[i])
}
for (i in 1:nrow(mydata)) {           # for принимает на вход вектор. Вектор от 1 до количества строк в mydata
if (mydata$gender[i] == 'male') {   # if принимает на вход вектор и условие. Если i значние mydata$gender[i] равно 'male'
print(mydata$score[i])            # print(mydata$score[i] выводит i значние переменной score. Выводит значние переменной score для всех строк где значние mydata$gender[i] равно 'male' по всем строкам от 1 до nrow(mydata)
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 5) {
print(yt$name[i])
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 3) {
ksk <- data.frame(yt$name[i], yt$teamleader[i], yt$numb_ret_depir[i])
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 3) {
ksk <- data.frame(yt$name[i], yt$teamleader[i], yt$numb_ret_depir[i])
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 5) {
print(yt$name[i])
}
}
for(i in 1:nrow(yt)) {
if(yt$numb_ret_depir[i] > 3) {
ksk <- data.frame(yt$name[i], yt$teamleader[i], yt$numb_ret_depir[i])
}
}
View(ksk)
mydata$quality <- rep(NA, nrow(mydata)) # Создадим новую переменную quality с пустыми значениями и длиной nrow(mydata).
yt$quality <- rep(NA, nrow(yt))
View(yt)
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur less than mean"
} else yt$quality[i] <- "dur equal mean"
{
for (i in 1:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur less than mean"
} else yt$quality[i] <- "dur equal mean"
}
for (i in 1:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur more than mean"
} else yt$quality[i] <- "dur equal mean"
}
for (i in 1:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality[i] <- "dur less than mean"
} else yt$quality[i] <- "dur equal mean"
}
length(yt$quality[quality == "dur more than mean"])
length(yt$quality[yt$quality == "dur more than mean"])
length(yt$quality[yt$quality == "dur less than mean"])
length(yt$quality[yt$quality == "dur equal mean"])
59+70
# yt
yt$quality2 <-  ifelse(yt$duration > mean(yt$duration, na.rm = T), "dur more than mean", "dur less than mean/dur equal mean")
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1                # если i < 51, то добавляем 1 к i (i + 1) и так до тех пор пока (i < 51)
}
mydata$score[i]
mydata$score
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1                # если i < 51, то добавляем 1 к i (i + 1) и так до тех пор пока (i < 51)
}
i <- 1
while (i < 51) {            # оператор while будет выполнять нижеуказанные действия до тех пор пока i < 51, т.е с 1 до 51-й строки
print(mydata$score[i])    # если i < 51, то выводим значение столбца mydata$score и так до тех пор пока (i < 51)
i <- i + 1                # если i < 51, то добавляем 1 к i (i + 1) и так до тех пор пока (i < 51)
}
yt$score <- ifelse((yt$numb_ret_depir >= 4 | yt$numb_ret_oiv >= 4), 'Bad', 'Norm') # отсупление
yt$score <- ifelse((yt$numb_ret_depir >= 4 | yt$numb_ret_oiv >= 4), 'Bad', 'Norm') # отсупление
yt$score
sum(yt$score[yt$score == 'Bad'])
length(yt$score[yt$score == 'Bad'])
length(yt$score[yt$score == 'Norm'])
for (i in i:nrow(yt)) {
if (yt$duration > mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration < mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in i:nrow(yt)) {
if (yt$duration > mean(yt$duration, na. rm = T)) {
yt$quality3[i] <<- "dur more than mean"
} if (yt$duration < mean(yt$duration, na. rm = T)) {
yt$quality3[i] <<- "dur less than mean"
} else yt$quality3[i] <<- "dur equal mean"
}
# yt
yt$quality3 <- rep(NA, nrow(yt))
for (i in i:nrow(yt)) {
if (yt$duration > mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration < mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in i:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration < mean(yt$duration, na. rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in i:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration < mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in i:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in i:nrow(yt)) {
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
}
for (i in 1:nrow(yt)) {
yt$quality3[i] <- "dur more than mean"
if (yt$duration[i] > mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur more than mean"
} if (yt$duration[i] < mean(yt$duration, na.rm = T)) {
yt$quality3[i] <- "dur less than mean"
} else yt$quality3[i] <- "dur equal mean"
