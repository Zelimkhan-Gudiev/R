yt <- subset(yt, select = - X)
View(yt)
yt <- subset(yt, select = - c(X, id)
View(yt)
View(yt)
yt <- subset(yt, select = - c(X, id))
yt <- subset(yt, select = - c(yt$X, yt$id))
yt <- subset(yt, select = - c('X', 'id'))
yt <- subset(yt, select = -c('X', 'id'))
yt <- read.csv2("yt.csv")
yt <- subset(yt, select = - X)
yt <- subset(yt, select = - yt[, X, id)
yt <- subset(yt, select = - yt[, yt$X, yt$id)
yt <- read.csv2("yt.csv")
yt <- subset(yt, select = - c(X, id))
yt <- read.csv2("yt.csv")
yt <- subset(yt, select = - c(X, ktd))
library(ggplot2)
str(swiss)
# relationships between all variables
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041,
0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255,
0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218,
0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
ggplot(my_vector, aes(x = my_vector)) +
geom_histogram()
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.05, colour="black", fill="white")
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.05, colour="black", fill="white")
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
ggplot(swiss, aes(x = log(Education))) +
geom_histogram(binwidth = 0.05, colour = 'black', fill = 'white')
ggplot(swiss, aes(x = log(Education))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white')
ggplot(swiss, aes(x = log(Education))) +
geom_histogram(binwidth = 0.1, colour = 'black', fill = 'white')
ggplot(swiss, aes(x = log(Education))) +
geom_histogram(binwidth = 0.2, colour = 'black', fill = 'white')
ggplot(swiss, aes(x = log(Education))) +
geom_histogram(binwidth = 0.3, colour = 'black', fill = 'white')
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.05, colour="black", fill="white")
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.03, colour="black", fill="white")
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.04, colour="black", fill="white")
hist(my_vector)
ggplot() + aes(my_vector) +
geom_histogram(binwidth=0.04, colour="black", fill="white")
shapiro.test(my_vector)
hist(log(my_vector))
shapiro.test(log(my_vector))
hist(sqrt(my_vector))
shapiro.test(sqrt(my_vector))
hist(1/(my_vector))
shapiro.test(1/(my_vector))
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
lm1 <- lm(Education ~ Examination, swiss)
#
# можно оценивать нормальность по Q-Q plot
qqnorm(my_vector, pch = 1, frame = FALSE)
qqline(my_vector, col = "steelblue", lwd = 2)
#
# можно оценивать нормальность по Q-Q plot
qqnorm(my_vector, pch = 1, frame = FALSE)
qqline(my_vector, col = "steelblue", lwd = 2)
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
swiss$Examination_squared <- (swiss$Examination)^2
x <- mtcars[,c(1,3)]
x
beta.coef <- function(x) {
x <- as.data.frame(scale(cbind(x[, 1], x[,2 ])))
fit <- lm(x[, 1] ~  x[, 2], x)$coefficients
return(fit)
}
beta.coef(x)
lm.beta(lm(x[, 1] ~  x[, 2], x))
lm.beta(lm(x[, 1] ~  x[, 2], x))
normality.test <- function(x) {
shapiro1 <- shapiro.test(x[, 1])$p.value
shapiro2 <- shapiro.test(x[, 2])$p.value
pvalue <- cbind(shapiro1, shapiro2)
vec <- paste(names(x), as.vector(pvalue))
return(as.vector(vec))
}
shapiro <-  sapply(x, function(x) shapiro.test(x))[2,]
shapiro
shapiro.test(x))[2,]
shapiro.test(x))
shapiro.test(x)
shapiro.test(x)
normality.test(x)
sapply(x, function(x) shapiro.test(x))[2,]
sapply(x, function(x) shapiro.test(x))
#
normality.test  <- function(x){
return(sapply(x, FUN =  shapiro.test)['p.value',])}
normality.test(x)
normality.test <- function(x) {
apply(x, 2, function (i) shapiro.test(i)$p.value)
}
normality.test(x)
#
normality.test  <- function(x){
fb <- function(x){
return(shapiro.test(x)$p.value)
}
return(sapply(x, FUN = fb))
}
normality.test(x)
length(x[1,]
length(x[1,])
length(x[1,])
#
normality.test  <- function(x){
x1 <- sapply(x, shapiro.test)
x1[2,]
}
#
normality.test  <- function(x){
x1 <- sapply(x, shapiro.test)
x1[2,]
}
normality.test(x)
sapply(x, shapiro.test)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
#
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
swiss$Examination_squared <- (swiss$Examination)^2
View(swiss)
lm2 <- lm(Education ~ Examination + Examination_squared, swiss)
summary(lm2)
summary(lm1)
anova(lm2, lm1)
lm1$fitted
swiss$lm1_fitted <- lm1$fitted
swiss$lm2_fitted <- lm2$fitted
View(swiss)
swiss$lm1_resid <- lm1$resid
swiss$lm2_resid <- lm2$resid
swiss$obs_number <- 1:nrow(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point(size = 3) +
geom_line(aes(x = Examination, y = lm1_fitted), col = 'red', lwd=1) +
geom_line(aes(x = Examination, y = lm2_fitted), col = 'blue', lwd=1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point(size = 3) +
geom_line(aes(x = Examination, y = lm1_fitted), col = 'red', lwd=1) +
geom_line(aes(x = Examination, y = lm2_fitted), col = 'blue', lwd=1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
# У меня почему-то не заработало:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
# Пришлось написать:
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(aes(yintercept = 0), col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3)
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline()
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red')
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 2)
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 3)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(aes(yintercept = 0), col = 'red', lwd = 1)
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 3)
# Пришлось написать:
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(aes(yintercept = 0), col = 'red', lwd = 1)
ggplot(swiss, aes(x = obs_number, y = lm1_resid)) +
geom_point(size = 3) + geom_smooth()
ggplot(swiss, aes(x = obs_number, y = lm2_resid)) +
geom_point(size = 3) + geom_smooth()
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3)
install.packages('gvlma')
library(gvlma)
df5 <- read.table('https://stepic.org/media/attachments/lesson/12088/homosc.csv')
df5 <- read.csv('https://stepic.org/media/attachments/lesson/12088/homosc.csv')
View(df5)
fit5 <- lm(DV ~ IV, df5)
summary(df5)
summary(fit5)
x <- gvlma(fit5)
x <- gvlma(DV ~ IV, df5)
summary(x)
ggplot(swiss, aes(x = lm1_resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
qqnorm(lm1$residuals)
qqline(lm1$residuals)
shapiro.test(lm1$residuals)
ggplot(swiss, aes(x = lm2_resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
qqnorm(lm2$residuals)
qqline(lm2$residuals)
shapiro.test(lm2$residuals)
shapiro.test(fit5)
shapiro.test(fit5$residuals)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram()
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 0.3)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 0.5)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 3)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5)
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5, col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5, col = 'white', fil = 'red')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5, col = 'white', fill = 'red')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5, fill = 'red', col = 'black')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.5, fill = 'red', col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 1.8, fill = 'red', col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 2,4, fill = 'red', col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 2.4, fill = 'red', col = 'white')
ggplot(x, aes(x = fit5$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
fit <- fit5
ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
shapiro.test(fit$residuals)$p.value
ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, ifelse(shapiro.test(fit$residuals)$pvalue < 0.05, 'red', 'green'), col = 'white')
ifelse(shapiro.test(fit$residuals)$pvalue < 0.05, 'red', 'green')
shapiro <- shapiro.test(fit$residuals)$p.value
shapiro
ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, ifelse(shapiro < 0.05, 'red', 'green'), col = 'white')
resid.norm <- function(x) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
shapiro.test(fit$residuals)$p.value
shapiro.test(fit$residuals)$p.value
resid.norm <- function(x) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
resid.norm(fit)
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(as.data.frame(x), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
# Черновики
shapiro <- shapiro.test(fit$residuals)$p.value
shapiro
fit$residuals
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(as.data.frame(fit), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(as.data.frame(fit), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
fit$model
# Черновики
as.data.frame(fit$model)
# Черновики
df <- as.data.frame(fit$model)
View(df)
ifelse(shapiro < 0.05, 'red', 'green')
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = colorH)
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = colorH)
colorH <- ''
ifelse(shapiro < 0.05, 'red', 'green')
my_plot <-  ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = colorH)
my_plot
ggplot(x, aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = colorH)
fit$model
#2
resid.norm <- function(fit) {
res <- fit$resid
s <- shapiro.test(res)$p.value
colorH <- ''
ifelse(shapiro < 0.05, colorH <- 'red', colorH <- 'green')
my_plot <-  ggplot(as.data.frame(fit$model), aes(x = res)) +
geom_histogram(binwidth = 2, fill = 'red', col = colorH)
return(my_plot)
}
resid.norm(fit)
#2
resid.norm <- function(fit) {
res <- fit$resid
s <- shapiro.test(res)$p.value
colorH <- ''
ifelse(shapiro < 0.05, colorH <- 'red', colorH <- 'green')
my_plot <-  ggplot(as.data.frame(fit$model), aes(x = res)) +
geom_histogram(binwidth = 2, fill = colorH, col = 'white')
return(my_plot)
}
resid.norm(fit)
#2
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
colorH <- ''
ifelse(shapiro < 0.05, colorH <- 'red', colorH <- 'green')
my_plot <-  ggplot(as.data.frame(fit$model), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = colorH, col = 'white')
return(my_plot)
}
resid.norm(fit)
resid.norm <- function(fit) {
shapiro <- shapiro.test(fit$residuals)$p.value
if(shapiro < 0.05) {
my_plot <-  ggplot(as.data.frame(fit$model), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'red', col = 'white')
return(my_plot)
} else
my_plot <-  ggplot(as.data.frame(fit$model), aes(x = fit$residuals)) +
geom_histogram(binwidth = 2, fill = 'green', col = 'white')
return(my_plot)
}
resid.norm(fit)
head(swiss)
# [1] "var1" "var3"
# Вам могут понадобиться следующие функции: which, dimnames, colnames, rownames, diag, abs. Посмотрите справку по ним.
# Подсказки: Далеко не всегда 1 == 1 есть ТRUE! Смотри закрепленный комментарий или можно почитать о проблеме здесь.
rm(swiss)
head(swiss)
pairs(swiss)
df <- swiss
df$Education <- df$Education + 1
pairs(swiss)
df <- swiss
df$EducationPlusOne <- df$Education + 1
pairs(swiss)
pairs(df)
cor(df)
# [1] "var1" "var3"
# Вам могут понадобиться следующие функции: which, dimnames, colnames, rownames, diag, abs. Посмотрите справку по ним.
# Подсказки: Далеко не всегда 1 == 1 есть ТRUE! Смотри закрепленный комментарий или можно почитать о проблеме здесь.
rm(df)
x <- swiss
x$EducationPlusOne <- x$Education + 1
pairs(x)
cor(x)
corr.test(x)$r
crt <- corr.test(x)$r
diag(crt) <- 0
crt
crt[which.max(abs(crt))]
high.corr <- function (df){
t <- df[,sapply(df,  is.numeric)] # очищаем наш дата фрейм от не числовых данных
r <- cor(t) # выводим таблицу в попарными коэффициентами корреляции Пирсона
r <- upper.tri(r,diag = F) * r # оставляем в таблице только элементы из верхней диагонали, так как верхние элементы такие же и они не нужны
mr <- r[which.max(abs(r))] # находим максимальный коэф Пирсона в нашей урезанной таблице
ind <- which(r==mr, arr.ind=TRUE) # сюда пишем индексы Строки и Колонки в которых содержится наш максимальный коэф Пирсона mr
print <- c(rownames(r)[ind[,"row"]],  colnames(r)[ind[,"col"]]) # выводим вектор с названием Строки и Колонки где лежит наш mr
return(print)
}
high.corr(x)
high.corr <- function (x){
t <- x[,sapply(df,  is.numeric)] # очищаем наш дата фрейм от не числовых данных
r <- cor(t) # выводим таблицу в попарными коэффициентами корреляции Пирсона
r <- upper.tri(r,diag = F) * r # оставляем в таблице только элементы из верхней диагонали, так как верхние элементы такие же и они не нужны
mr <- r[which.max(abs(r))] # находим максимальный коэф Пирсона в нашей урезанной таблице
ind <- which(r==mr, arr.ind=TRUE) # сюда пишем индексы Строки и Колонки в которых содержится наш максимальный коэф Пирсона mr
print <- c(rownames(r)[ind[,"row"]],  colnames(r)[ind[,"col"]]) # выводим вектор с названием Строки и Колонки где лежит наш mr
return(print)
}
high.corr(x)
high.corr <- function (x){
t <- x[,sapply(x,  is.numeric)] # очищаем наш дата фрейм от не числовых данных
r <- cor(t) # выводим таблицу в попарными коэффициентами корреляции Пирсона
r <- upper.tri(r,diag = F) * r # оставляем в таблице только элементы из верхней диагонали, так как верхние элементы такие же и они не нужны
mr <- r[which.max(abs(r))] # находим максимальный коэф Пирсона в нашей урезанной таблице
ind <- which(r==mr, arr.ind=TRUE) # сюда пишем индексы Строки и Колонки в которых содержится наш максимальный коэф Пирсона mr
print <- c(rownames(r)[ind[,"row"]],  colnames(r)[ind[,"col"]]) # выводим вектор с названием Строки и Колонки где лежит наш mr
return(print)
}
high.corr(x)
r <- cor(t) # выводим таблицу в попарными коэффициентами корреляции Пирсона
t <- x[,sapply(x,  is.numeric)]
t
r <- cor(t)
r
r <- upper.tri(r,diag = F) * r
r
mr <- r[which.max(abs(r))]
mr
ind <- which(r==mr, arr.ind=TRUE)
ind
high.corr(x)
