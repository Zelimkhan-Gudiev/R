AirPassengers
AirPassengers
str(AirPassengers)
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
AirPassengers
View(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
View(ap)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
remove(list = ls())
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
### Step 6 из 8
# И так ваша задача создать переменную good_months и сохранить в нее число пассажиров только в тех месяцах,
# в которых это число больше, чем показатель в предыдущем месяце.
# Важный момент! В R оператор : для создания последовательности имеет приоритет над арифметическими действиями.
# Таким образом, если у вас есть переменная i, равная 10, и вы хотите создать вектор от 1 до i - 1,
# воспользуйтесь скобками, чтобы указать последовательность действий.
?AirPassengers
View(AirPassengers)
# Вариант 1
for (AirPassengers in 1:144) {
good_months <- AirPassengers[i + 1]
good_months
AirPassengers
View(AirPassengers)
remove(list = ls())
View(AirPassengers)
AirPassengers
View(AirPassengers)
View(AirPassengers)
AirPassengers
str(AirPassengers)
?AirPassengers
View(AirPassengers)
str(AirPassengers)
ap <- AirPassengers
ap <- data.frame(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
View(AirPassengers)
remove(list = ls())
remove(list = ls())
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700, 560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
x^2
x <- c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700) # Баллы за речь
sum(x) # Сумма баллов за речь
x_sq <- x^2 # Сумма баллов за речь
sum_x_sq <- sum(x_sq)
x^2
c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2)
sum(x_sq)
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
y^2
y <- c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750) # Баллы за математику
sum(y) # Сумма баллов за математику
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2 # Квадраты баллов за математику
y_sq <- y^2 # Квадраты баллов за математику
y^2
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
sum(c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
sum(y_sq)
sum(x - mean(x))
sum((x - mean(x))^2)
sum((y-mean(y))^2)
sum((x - mean(x)) * sum(y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
ssxy/sqrt(ssx * ssy)
ssxy <- sum((x - mean(x)) * (y - mean(y)))
ssx  <- sum((x - mean(x))^2)
ssy  <- sum((y-mean(y))^2)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor.test(x, y)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor(x, y, method = "pearson")
cor(x, y, method = "pearson", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen"))
cor(x, y, method = c("pearson", "kendall", "spearmen"))
?cor
cor(x, y, method = c("pearson", "kendall", "spearman"))
cor(x, y, method = c("pearson", "kendall", "spearman"))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
t.test(cor.test(x, y))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
?t.test
t = r*sqrt(n - 2)/sqrt(1 - r^2)
t
cor.test(x, y)
r*sqrt(n - 2)/sqrt(1 - r^2)
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
n <- 10
t = r*sqrt(n - 2)/sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
r
sqrt(n - 2)
sqrt(4)
sqrt(n - 2)
[1] 2.828427
2.828427*0.8702621
r*sqrt(n - 2)
sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
2.461473/0.492589
2.46/0.49
r*sqrt(n - 2)/sqrt(1 - r^2)
0.87 * sqrt(10 - 2)/sqrt(1 - 0.87^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
0.84^2
0.11^2
- 0.28^2
-0.28^2
0.28^2
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
remove(ls = list())
remove(list = ls())
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
iq <- c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)
table_7.2 <- data.frame(student, height_inch, iq)
View(table_7.2)
cor.test(height_inch, iq)
0.1347945 * sqrt(10 - 2)/sqrt(1 - 0.1347945^2)
# 3) Рассситайте коэффициент детерминации и проанализируйте результаты
0.1347945^2
0.1347945^2
# альтернативный способ
ssx <- sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch))
sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
sum(iq - mean(iq))
sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssx <- sum(height_inch - mean(height_inch))
ssx <- sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
ssy <- sum(iq - mean(iq))
ssy <- sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssxy <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
r = ssxy/sqrt(ssx * ssy)
r
r <- ssxy/sqrt(ssx * ssy)
r
cor.test(height_inch, iq)
ssxy
ssx
ssy
ssy
r <- 24.5/sqrt(5.684342e-14 * 0)
r
cor.test(height_inch, iq)
ssxy
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(height_inch - mean(height_inch))
sum((height_inch - mean(height_inch))^2)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
sum(
(
iq - mean(iq)
)^2
)
sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssx
ssx <- sum(
(
height_inch - mean(height_inch)
)^2
)
ssx <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
# ssy
ssy <- sum(
(
iq - mean(iq)
)^2
)
ssy <- sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssxy
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq))) # 24.5
ssxy/sqrt(ssx * ssy)
r <-  ssxy/sqrt(ssx * ssy)
r
ssxy
ssx
ssy
24.5/sqrt(124.9 * 264.5)
ssxy/sqrt(ssx * ssy)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
n <- 10
t <-  r * sqrt(n - 2)/sqrt(1 - r^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
sum(height_inch)
sum(height_inch^2)
sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
install.packages("rgoogleads")
install.packages("googlesheets4")
library(googlesheets4)
library(googlesheets4)
sheets_auth(email = 'gudievzk@gmail.com')
# lib
library(googlesheets4)
# авторизация
sheets_auth(email = "selesnow@gmail.com")
# данные для теста
my_iris   <- iris
my_mtcars <- mtcars
# создаём докс
ss <- sheets_create("demo_dox",
sheets = list(iris   = head(my_iris),
mtcars = my_mtcars))
# открыть созданный Google Dox
sheets_browse(ss)
# создать новый лист
sheets_sheet_add(ss,
sheet = "mtcars_new",
.after = "mtcars")
gs4_auth(email = 'GudievZK@gmail.com')
remove(list = ls())
# lib
library(googlesheets4)
# данные для теста
my_iris   <- iris
my_mtcars <- mtcars
# создаём докс
ss <- sheets_create("demo_dox",
sheets = list(iris   = head(my_iris),
mtcars = my_mtcars))
# создаём докс
ss <- gs4_create("demo_dox",
sheets = list(iris   = head(my_iris),
mtcars = my_mtcars))
# открыть созданный Google Dox
gs4_browse(ss)
# создать новый лист
sheet_add(ss,
sheet = "mtcars_new",
.after = "mtcars")
# запись данных на новый лист
sheet_write(data = my_iris,
ss = ss,
sheet = "iris_new")
# дописать значиения
sheet_append(data  = tail(my_iris, 20),
ss    = ss,
sheet = "iris")
# получить список листок google таблицы
sheet_names(ss)
# чтение листа из гугл таблиц
ss2 <- as_sheets_id("17dRz4AYgfQvpTI6J6p9AYjrVuC-gTRj7BM4MzgAxIKY")
ss2
data <- sheets_read(ss2,
sheet = "iris_new")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1VOKDMjL2LoasWjF7w1kSkKz71VyVDr03")
dolya <- sheets_read(dolya,
sheet = "dolya")
dolya <- sheet_read(dolya,
sheet = "dolya")
dolya <- read_sheet(dolya,
sheet = "dolya")
dolya
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1VOKDMjL2LoasWjF7w1kSkKz71VyVDr03")
dolya <- read_sheet(dolya,
sheet = "dolya")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1VOKDMjL2LoasWjF7w1kSkKz71VyVDr03")
dolya <- read_sheet(dolya,
sheet = "Export Worksheet")
dolya
dolya <- read_sheet(dolya,
sheet = "Export Worksheet")
dolya_s <- read_sheet(dolya,
sheet = "Export Worksheet")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1VOKDMjL2LoasWjF7w1kSkKz71VyVDr03")
dolya_s <- read_sheet(dolya,
sheet = "Export Worksheet")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1VOKDMjL2LoasWjF7w1kSkKz71VyVDr03")
dolya_s <- read_sheet(dolya,
sheet = "Export Worksheet")
dolya_s <- range_read(dolya, shett = "Export Worksheet")
dolya_s <- range_read(dolya, sheet = "Export Worksheet")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1_HvhGAXsk2_s161Jmv01emFqmKaEr3aZ")
dolya_s <- read_sheet(dolya,
sheet = "Export Worksheet")
dolya_s <- range_read(dolya, sheet = "Export Worksheet")
# чтение листа из гугл таблиц
dolya <- as_sheets_id("1ltR2wYrmN1tPla6TJfvpvG-IwInB_43Gth_4Ywws5S8")
dolya_s <- read_sheet(dolya,
sheet = "Export Worksheet")
dolya_s <- range_read(dolya, sheet = "Export Worksheet")
View(dolya_s)
dolya <- range_read(dolya, sheet = "Export Worksheet")
names(dolya)
delAndSt <- subset(dolya, IS_STANDARD_PRODUCT == 2)
View(delAndSt)
condStand <- subset(dolya, IS_STANDARD_PRODUCT %in% c(2, 4, 5, 51, 6))
View(condStand)
cor(iris[, -5])
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
remove(list = ls())
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")#
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
summary(fit)
fit2 <- lm(Fertility ~ Examination*Catholic, data = swiss)
summary(fit2)
confint(fit2)
yt <- read.csv2("yt.csv")
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")#
yt <- read.csv2("yt.csv")
library(readxl)
yt <- read_xlsx("\plan.xlsx")
yt <- read_xlsx("plan.xlsx")
View(yt)
yt <- select(yt, "ID задачи", "Заголовок", "Основание", "План по стандартизации", "Квартал", "Вид ТЗ", "Stage",
"Количество возвратов от ДЭПиР", "Количество возвратов от ОИВ", "Исполнитель", "Руководитель группы",
"Курирующий заместитель руководителя ПО", "Исполнитель ДЭПиР", "Контракт", "ПЦП", "Критерии оценки",
"Форма 2", "Способы определения поставщика (подрядчика, исполнителя)", "Теги", "КТД", "Дата создания",
"Время нахождения в статусе \"В работе АЦ\"", "Время нахождения в статусе \"Доработка ОИВ\"",
"Время нахождения в статусе \"Доработка ДЭПиР\"", "Время нахождения в статусе \"Внут. согл.\"",
"Время нахождения в статусе \"В ДЭПиР\"", "Время нахождения в статусе \"На согл. в ОИВ\"",
"Время нахождения в статусе \"Подготовка к РГ\"", "Время нахождения в статусе \"РГ\"",
"Время нахождения в статусе \"МРГ\"", "Время нахождения в статусе \"Загрузка в ЕАИСТ\"",
"Длительность")
library(dplyr)
yt <- select(yt, "ID задачи", "Заголовок", "Основание", "План по стандартизации", "Квартал", "Вид ТЗ", "Stage",
"Количество возвратов от ДЭПиР", "Количество возвратов от ОИВ", "Исполнитель", "Руководитель группы",
"Курирующий заместитель руководителя ПО", "Исполнитель ДЭПиР", "Контракт", "ПЦП", "Критерии оценки",
"Форма 2", "Способы определения поставщика (подрядчика, исполнителя)", "Теги", "КТД", "Дата создания",
"Время нахождения в статусе \"В работе АЦ\"", "Время нахождения в статусе \"Доработка ОИВ\"",
"Время нахождения в статусе \"Доработка ДЭПиР\"", "Время нахождения в статусе \"Внут. согл.\"",
"Время нахождения в статусе \"В ДЭПиР\"", "Время нахождения в статусе \"На согл. в ОИВ\"",
"Время нахождения в статусе \"Подготовка к РГ\"", "Время нахождения в статусе \"РГ\"",
"Время нахождения в статусе \"МРГ\"", "Время нахождения в статусе \"Загрузка в ЕАИСТ\"",
"Длительность")
yt <- filter(yt, yt$Теги != "Не полностью YouTrackная")
yt <- filter(yt, yt$Stage == "Завершено")
yt <- select(yt, "ID задачи", "Заголовок", "Основание", "План по стандартизации", "Квартал", "Вид ТЗ", "Stage",
"Количество возвратов от ДЭПиР", "Количество возвратов от ОИВ", "Исполнитель", "Руководитель группы",
"Курирующий заместитель руководителя ПО", "Исполнитель ДЭПиР", "Контракт", "ПЦП", "Критерии оценки",
"Форма 2", "Способы определения поставщика (подрядчика, исполнителя)", "Теги", "КТД", "Дата создания",
"Время нахождения в статусе \"В работе АЦ\"", "Время нахождения в статусе \"Доработка ОИВ\"",
"Время нахождения в статусе \"Доработка ДЭПиР\"", "Время нахождения в статусе \"Внут. согл.\"",
"Время нахождения в статусе \"В ДЭПиР\"", "Время нахождения в статусе \"На согл. в ОИВ\"",
"Время нахождения в статусе \"Подготовка к РГ\"", "Время нахождения в статусе \"РГ\"",
"Время нахождения в статусе \"МРГ\"", "Время нахождения в статусе \"Загрузка в ЕАИСТ\"",
"Длительность")
yt <- rename(yt,
id = "ID задачи", name = "Заголовок", reason = "Основание", year_plan_st = "План по стандартизации",
kvartal = "Квартал", kind_tz = "Вид ТЗ", stage = "Stage", numb_ret_depir = "Количество возвратов от ДЭПиР",
numb_ret_oiv = "Количество возвратов от ОИВ", executor_ac = "Исполнитель", teamleader = "Руководитель группы",
deputy = "Курирующий заместитель руководителя ПО", executor_depir = "Исполнитель ДЭПиР", contract = "Контракт",
pcp = "ПЦП", criteria = "Критерии оценки", f2 = "Форма 2", method = "Способы определения поставщика (подрядчика, исполнителя)",
tegs = "Теги", ktd = "КТД", created_date = "Дата создания", time_ac = "Время нахождения в статусе \"В работе АЦ\"",
time_rev_oiv = "Время нахождения в статусе \"Доработка ОИВ\"", time_rev_depir = "Время нахождения в статусе \"Доработка ДЭПиР\"",
time_vn_sogl = "Время нахождения в статусе \"Внут. согл.\"", time_depir = "Время нахождения в статусе \"В ДЭПиР\"",
time_oiv = "Время нахождения в статусе \"На согл. в ОИВ\"", time_prep_rg = "Время нахождения в статусе \"Подготовка к РГ\"",
time_rg = "Время нахождения в статусе \"РГ\"", time_mrg = "Время нахождения в статусе \"МРГ\"",
time_eaist = "Время нахождения в статусе \"Загрузка в ЕАИСТ\"", duration = "Длительность")
names(yt)
str(yt)
# корректирорвка типов
yt_n_names <- c('numb_ret_depir', 'numb_ret_oiv', 'time_plan', 'time_ac', 'time_rev_oiv',
'time_rev_depir', 'time_vn_sogl', 'time_depir', 'time_oiv',
'time_prep_rg', 'time_rg', 'time_mrg', 'time_eaist', 'duration')
yt[, yt_n_names] <- lapply(yt[, yt_n_names], as.numeric)
yt_f_names <- c('reason', 'year_plan_st', 'kvartal', 'kind_tz', 'stage', 'executor_ac',
'teamleader', 'deputy', 'executor_depir', 'contract', 'pcp', 'criteria',
'f2', 'method', 'tegs')
yt[yt_f_names] <- lapply(yt[yt_f_names], as.factor)
write.csv2(yt, file = "yt.csv")
yt <- read.csv2("yt.csv")
View(yt)
rm(c(yt_f_names, yt_n_names))
rm(yt_f_names, yt_n_names)
summary(fit)
names(yt)
ytFit <- lm(duration ~ kind_tz, yt)
ytFit
summary(ytFit)
aggregate(duration ~ kind_tz, yt, mean)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv"﻿)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
test_data
fit <- lm(y ~ x_1 + x_2, na.rm = T, test_data)
fit <- lm(y ~ x_1 + x_2, test_data)
summary(fit)
fit2 <- lm(y ~ x_1 + x_2, na.action = T, test_data)
fit2 <- lm(y ~ x_1 + x_2, na.action = F, test_data)
fit2 <- lm(y ~ x_1 + x_2, test_data, na.action = F)
fit2 <- lm(y ~ x_1 + x_2, test_data, na.action = T)
fit
summary(fit)
lm
test_data
summary(fit)
fit2 <- lm(y ~ x_1 + x_2, test_data, na.action = T)
summary(fit2)
fit3 <- lm(y ~ x_1 + x_2, test_data, na.action = T)
fit3
fit2 <- lm(y ~ x_1 + x_2, test_data, na.action = F)
fit3 <- lm(y ~ x_1 + x_2, test_data, na.action = F)
predict(fit, subset(test_data, x_3 != NA))
subset(test_data, x_3 != NA)
predict(fit, subset(test_data, y != NA))
predict(fit, subset(test_data, y != NA))
subset(test_data, y != NA)
predict(fit, subset(test_data, y != 'NA'))
test_data$y_full <- predict(fit, subset(test_data, y != 'NA'))
View(test_data)
test_data$y_full1 <- predict(fit, test_data)
View(test_data)
