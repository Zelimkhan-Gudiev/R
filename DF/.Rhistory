# Вариант 7
aggregate(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width ) ~ 1, iris, sd)
# Вариант 8
sapply(iris[1:4], FUN=sd)
# Вариант 9
SD(iris)
# Вариант 10
describeBy(x=iris, group = iris$Sepal.Length & iris$Sepal.Width)
# Вариант 11
apply(iris[,1:4], 2, sd)
# Вариант 12
describe(iris[,-c(5)])["sd"]
# Вариант 13
for (v in 1:4) {sd_v[v] <-  sd(iris[,v])}
# Вариант 14
arrange(describe(iris, digits = 2)[ ,'sd', drop=F])
aggregate(iris$Sepal.Length ~ Species, iris, sd)
# Вариант 1
describe(iris)["median"]
describe(yt)["median"]
# Вариант 1
describe(iris)["median"]
describe(yt)["median"]
my_vector <- rnorm(30)
describe(my_vector)
hist(my_vector)
my_vector[sample(1:30, 10)] <- NA # на десять случайных позиций поместим NA
# Задача для самостоятельной работы:
# Изучите справку по функции replace. Вызвать справку можно исполнив команду:
?replace
library(dplyr)
library(psych)
library(ggplot2)
setwd("C:/Users/GudievZK/Desktop/GitHub/DF/")
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")
remove(list = ls())
df  <- mtcars
yt <- read.csv2("yt.csv")
str(yt)
yt_f_names <- c('reason', 'year_plan_st', 'kvartal', 'stage', 'executor_ac', 'teamleader', 'deputy', 'contract',
'pcp', 'criteria', 'f2', 'method', 'tegs')
yt[, yt_f_names] <- lapply(yt[, yt_f_names], factor)
write.csv2(yt, "yt.csv")
str(yt)
yt_f_names <- c('reason', 'year_plan_st', 'kvartal', 'stage', 'executor_ac', 'teamleader', 'deputy', 'contract',
'pcp', 'criteria', 'f2', 'method', 'tegs', 'what_duration', 'what_numb_ret_depir', 'top_worst_ktd', 'tru')
yt[, yt_f_names] <- lapply(yt[, yt_f_names], factor)
write.csv2(yt, "yt.csv")
str(yt)
yt_f_names <- c('reason', 'year_plan_st', 'kvartal', 'stage', 'executor_ac', 'teamleader', 'deputy', 'contract',
'pcp', 'criteria', 'f2', 'method', 'tegs', 'what_duration', 'what_numb_ret_depir', 'what_numb_ret_oiv','top_worst_ktd', 'tru')
yt[, yt_f_names] <- lapply(yt[, yt_f_names], factor)
write.csv2(yt, "yt.csv")
str(yt)
df$vs  <- factor(df$vs, labels = c("V", "S"))
df$am  <- factor(df$am, labels = c("Auto", "Manual"))
### 1) hist
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
### 1) hist
hist(df$mpg, breaks = 40, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
### 1) hist
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
### 1) hist
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 2.3, cex.axis = 1.3)
### 1) hist
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
### 2) boxplot
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(mpg ~ am, df, ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
### 3) plot
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
plot(~ mpg + hp, df)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
plot(~ mpg + hp, df)
### 1) hist
hist(yt$duration)
hist(yt$duration, breaks = 20)
hist(yt$numb_ret_depir, breaks = 20)
hist(yt$numb_ret_oiv, breaks = 5)
### 2) boxplot
levels(yt$reason)
boxplot(duration ~ deputy, subset(yt, reason %in% c('План по стандартизации', 'Поручение ДЭПиР или руководства')),
ylab = 'Длительность, раб.дн.', xlab = 'Заместитель РПО', main = "Длительность разработки",
col = 'green', cex.lab = 1.3, cex.axis = 1.3)
boxplot(duration ~ reason, yt, ylab = 'Длительность, раб.дн.', xlab = 'Основание', main = "Длительность разработки",
col = 'green', cex.lab = 1.3, cex.axis = 1.3)
table(yt$deputy)
### 3) plot
plot(yt$time_depir, yt$numb_ret_depir)
cor.test(yt$time_depir, yt$numb_ret_depir)
plot(density(yt$duration), xlab = "Длительность", main ="Density of Длительность",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(yt$duration, yt$numb_ret_depir, xlab = "Длительность", ylab = "Количество возвратов от ДЭПиР",
main = "Взаимосвязсь между длительностью и количеством возвратов от ДЭПиР", pch = 20)
cor.test(yt$duration, yt$numb_ret_depir)
plot(yt$duration, yt$numb_ret_oiv, xlab = "Длительность", ylab = "Количество возвратов от ОИВ",
main = "Взаимосвязсь между длительностью и количеством возвратов от ОИВ", pch = 20)
cor.test(yt$duration, yt$numb_ret_oiv)
plot(~ duration + numb_ret_depir, yt)
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am))+
geom_density(alpha = 0.5)+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG density plot")
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot()+
xlab("Transmission type")+
ylab("Gross horsepower")+
scale_fill_discrete(name="Engine type")+
ggtitle("Gross horsepower and engine type")
ggplot(df, aes(x = mpg, y = hp, size = qsec))+
geom_point()+
xlab("Miles/(US) gallon")+
ylab("Gross horsepower")+
scale_size_continuous(name="1/4 mile time")+
ggtitle("Miles/(US) gallon and Gross horsepower")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2
my_plot2 + geom_boxplot()
ggplot(yt, aes(x = duration)) +
geom_histogram(fill = "white", col = "black", binwidth = 20) +
xlab("Длительность утверждения КТД, раб. дни") +
ylab("Количество КТД") +
ggtitle("Гистограмма длительности утверждения КТД")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot
my_plot2
my_plot2 + geom_boxplot()
ggplot(yt, aes(x = duration)) +
geom_histogram(fill = "white", col = "black", binwidth = 20) +
xlab("Длительность утверждения КТД, раб. дни") +
ylab("Количество КТД") +
ggtitle("Гистограмма длительности утверждения КТД")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_dotplot(binwidth = 15)+
xlab("Длительность, раб. дни") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_density(alpha = 0.5) +
xlab("Длительность, раб. дни") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_dotplot(binwidth = 15)+
xlab("Длительность, раб. дни") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_density(alpha = 0.5) +
xlab("Длительность, раб. дни") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = numb_ret_oiv)) +
geom_density(fill = "red")
ggplot(yt, aes(x = numb_ret_depir, fill = kind_tz)) +
geom_density(alpha = 0.5) +
xlab("Количестово возвратов от ДЭПиР") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Количество возрвратов от ДЭПиР")
plot_durarion_other_var <- ggplot(yt, aes(x = duration, y = numb_ret_depir, col = kind_tz, size = numb_ret_oiv)) +
geom_point() +
xlab("Длительность, раб. дни") +
ylab("Количество возвратов от ДЭПиР") +
scale_color_discrete("Вид ТЗ") +
scale_size_continuous("Количество возрвратов от ОИВ") +
ggtitle('Взаимосвязь длительности разработки, количество возрвратов от ДЭПиР, вида ТЗ и количество возрвратов от ОИВ')
plot_durarion_other_var
ggplot(yt, aes(x = duration, y = numb_ret_depir, col = kind_tz, size = numb_ret_oiv)) +
geom_point() +
xlab("Длительность, раб. дни") +
ylab("Количество возвратов от ДЭПиР") +
ggtitle('Взаимосвязь длительности разработки, количество возрвратов от ДЭПиР, вида ТЗ и количество возрвратов от ОИВ')
plot_durarion_other_var
ggplot(subset(yt, reason %in% c('План по стандартизации', 'Поручение ДЭПиР или руководства') & kind_tz == "ТТЗ"), aes(x = tru, y = duration)) +
geom_boxplot()
ggplot(yt, aes(x = tru, y = duration)) +
geom_boxplot()
levels(yt$reason)
ggplot(subset(yt, reason %in% c('План по стандартизации', 'Поручение ДЭПиР или руководства')
& kind_tz == "ТТЗ"), aes(x = tru, y = duration)) +
geom_boxplot()
airquality
str(airquality)
airquality$Month <- factor(airquality$Month)
# 1
ggplot(airquality, aes(x = Month, y = Ozone)) +
geom_boxplot()
#
ggplot(yt, aes(x = kind_tz, y = duration)) +
geom_boxplot()
# 2
boxplot (Ozone ~ Month, airquality)
# 3
ggplot(na.exclude(airquality), aes(x = as.factor(Month), y = Ozone))+
geom_boxplot(fill = "red", alpha = 0.5)+
xlab("Month")
plot1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = hp)) +
geom_point()
plot1
mtcars
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species)) # right
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram() # right
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species, size = Petal.Length)) +
geom_point()
# Вариант 1
describeBy(airquality, group = 'Month')
# Вариант 2
describeBy(airquality, airquality$Month == 8)[['TRUE']]['Wind','skew']
describeBy(yt$duration, yt$teamleader)
# Вариант 1
describeBy(airquality, group = 'Month') # 0.04
# Вариант 2
describeBy(airquality, airquality$Month == 8)[['TRUE']]['Wind','skew']
# Вариант 3
describeBy(airquality$Wind, airquality$Month == 8)$'TRUE'['skew']
# Вариант 4
describeBy(airquality$Wind, group=airquality$Month == 8)
# Вариант 5
describeBy(x = airquality, na.rm=T, group = airquality$Month, mat = T)
# Вариант 2
describe(iris)['sd']
describe(iris)
# Вариант 3
subset(describe(iris), select = sd)
# Вариант 5
describe(iris)
# Вариант 6
sapply(iris[1:4], sd)
# Вариант 7
aggregate(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width ) ~ 1, iris, sd)
# Вариант 8
sapply(iris[1:4], FUN=sd)
# Вариант 9
SD(iris)
# Вариант 10
describeBy(x=iris, group = iris$Sepal.Length & iris$Sepal.Width)
# Вариант 11
apply(iris[,1:4], 2, sd)
# Вариант 12
describe(iris[,-c(5)])["sd"]
aggregate(iris$Sepal.Length ~ Species, iris, sd)
# Вариант 1
describe(iris)["median"]
describe(iris)
4200000/24
remove(list = ls())
library(dplyr)
df <- read.csv('grants.csv')
yt <- read.csv2("yt.csv")
names(yt)
df <- read.csv("grants.csv")
str(df)
df$status <- as.factor(df$status)
View(df)
View(df)
levels(df$status) <- c("Not funded", "Funded")
df$status <- factor(df$status, labels = c("Not funded", "Funded"))
#### Step 3: 1d Table __________________________________________________________ ####
t1 <- table(df$status)
t1
dim(t1)
#### Step 3: yt (1d Table) __________________________________________________________ ####
table(yt$deputy)
dim(table(yt$deputy))
table(yt$kind_tz)
dim(table(yt$kind_tz))
#### Step 4: 2d Table __________________________________________________________ ####
t2 <- table(df$status, df$field)
t2
t2 <- table(status = df$status, field = df$field)
t2
dim(t2)
prop.table(t2)
round(prop.table(t2)*100, 1)
sum(c(7.0, 33.3, 4.2, 4.9, 3.1, 4.6, 30.4,  4.6, 5.5, 2.3))
round(prop.table(t2, 2) *100, 1)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
yt_t1
yt_t1 <- as.data.frame(yt_t1)
View(yt_t1)
prop.table(yt_t1, 1)
dim(yt_t1)
prop.table(yt_t1, 1)
prop.table(yt_t1, 2)
round(prop.table(yt_t1, 1), 1)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
prop.table(yt_t1, 1)
prop.table(yt_t1, 2)
round(prop.table(yt_t1, 1), 1)
round(prop.table(yt_t1, 2) * 100, 1)
#
yt$ktd[yt$top_worst_ktd == '1']
yt$ktd[yt$top_worst_ktd == '2']
#
yt$ktd[yt$top_worst_ktd == '1']
yt_t1
yt <- yt %>%
mutate(tru = case_when(
startsWith(ktd, "П") ~ "Поставка товра",
startsWith(ktd, "В") ~ "Выполнение работ",
startsWith(ktd, "О") ~ "Оказание услуг",
))
# Корректировка yt$deputy
yt$ktd[yt$deputy == '']
yt$teamleader[yt$ktd == "Поставка химических веществ"]
yt$teamleader[yt$ktd == "Поставка мебели детской и ученической"]
yt$teamleader[yt$ktd == "Поставка учебного оборудования для музыкального класса, закупаемого в рамках проекта «Техносфера современной школы»"]
grep("Поставка", yt$ktd, value = T)
grep("Оказание", yt$ktd, value = T)
grep("Выполнение", yt$ktd, value = T)
for (i in 1:nrow(yt)) {
if (grep("Поставка", yt$ktd[i], value = T)) {
yt$tru[i] <- "Потавка товара"
} else if (grep("Оказание", yt$ktd[i], value = T)) {
yt$tru[i] <- "Оказание услуг"
} else yt$tru[i] <- "Выполнение работ"
}
View(yt)
#### Step 4: 3d Table __________________________________________________________ ####
t3 <- table(Years = df$years_in_uni, Field = df$field, Status = df$status)
t3
dim(t3)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
yt_t1 <- as.data.frame(yt_t1)
dim(yt_t1)
prop.table(yt_t1, 1)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
prop.table(yt_t1, 1)
prop.table(yt_t1, 2)
yt_t2 <- table('ТРУ' = yt$tru, 'Уровень наихудших КТД' = yt$top_worst_ktd)
prop.table(yt_t2, 2)
round(prop.table(yt_t2, 2), 1)
round(prop.table(yt_t2, 2)*100, 1)
# К частям таблицы можно обращаться так же, как и к матрицам.
# HairEyeColor - таблица с данными, встроенными в R. Посмотрите на неё в R. Команда
dimnames(HairEyeColor)
# позволит нам посмотреть, какие измерения есть в этой таблице и как они называются. Например, чтобы обратиться к части таблицы,
# в которой хранятся данные только о мужчинах, нам нужно выполнить следующую команду:
HairEyeColor[ , ,'Male']
HairEyeColor[ , "Blue",'Male'] # обращение к части таблицы, в которой хранятся данные только о мужчинах с голубыми глазами
# Ваша задача в переменную red_men сохранить долю рыжеволосых (Red) от общего числа голубоглазых мужчин.
# Обратите внимание, что нужны не проценты, а просто доля, то есть десятичная дробь  (например, не 10%, а 0.1).
# Дополните код, чтобы получить верный ответ.
HairEyeColor <- HairEyeColor
# Ваша задача в переменную red_men сохранить долю рыжеволосых (Red) от общего числа голубоглазых мужчин.
# Обратите внимание, что нужны не проценты, а просто доля, то есть десятичная дробь  (например, не 10%, а 0.1).
# Дополните код, чтобы получить верный ответ.
HairEyeColor <- HairEyeColor
prop.table(HairEyeColor[, , "Male"], 2)
red_men <- prop.table(HairEyeColor[, , "Male"], 2)
round(red_men, 3)
prop.table(HairEyeColor["Red", , "Male"], 3)
red_men <- prop.table(HairEyeColor[, , "Male"], 2)
round(red_men, 3)
prop.table(HairEyeColor["Red", , "Male"], 3)
dim(HairEyeColor)
#
red_man <- HairEyeColor['Red', 'Blue', 'Male']
red_man
blue_eyes_man <- HairEyeColor[, "Blue", 'Male']
blue_eyes_man
red_man_sum <- sum(red_man)
red_man_sum
blue_eyes_man_sum <- sum(blue_eyes_man)
blue_eyes_man_sum
red_men <- red_man_sum / blue_eyes_man_sum
red_men
#
prop.table(HairEyeColor[, , 'Male'], 2)['Red', 'Blue']
prop.table(HairEyeColor[, , 'Male'], 2)
#
prop.table(HairEyeColor[,'Blue','Male'])['Red']
#
prop.table(HairEyeColor[ , 'Blue' ,'Male'])[['Red']]
#
male <- HairEyeColor[ , ,'Male']
male
str <- prop.table(male, 2)
str
str[3,2]
#
prop.table(HairEyeColor[,2,1], )[3]
HairEyeColor
#
as.vector(prop.table(HairEyeColor[,'Blue',],2))[3]
prop.table(HairEyeColor[,'Blue',],2))[3]
prop.table(HairEyeColor[,'Blue',],2)
#### Step 6: Exircises __________________________________________________________ ####
# С таблицами, как и с матрицами, можно совершать разные арифметические операции, например, суммировать все элементы таблицы.
# Напишите число зеленоглазых женщин в наборе данных HairEyeColor.
sum(HairEyeColor[, "Green", "Female"])
barplot(t1)
barplot(t2)
barplot(t2, legend.text = TRUE, args.legend = list(x = "topright"))
barplot(t2, legend.text = TRUE, args.legend = list(x = "topright"), beside = TRUE)
mosaicplot(t2)
barplot(yt_t1)
barplot(yt_t1, legend.text = T, args.legend = list(x = "topright"), beside = T)
yt_t1
barplot(yt_t1, legend.text = T, args.legend = list(x = 'topleft'), beside = T)
barplot(yt_t2, legend.text = T, args.legend = list(x = 'topleft'), beside = T)
#### Step 8: Exircises __________________________________________________________ ####
# Постройте столбчатую диаграмму распределения цвета глаз по цвету волос только у женщин из
# таблицы HairEyeColor. По оси X должен идти цвет волос, цвет столбиков должен отражать цвет глаз. По оси Y - количество наблюдений.
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame:
mydata <- as.data.frame(HairEyeColor)
dim(mydata)
mydata <- as.data.frame(HairEyeColor[, , "Female"])
mydata
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
ggplot(data = yt, aes(x = top_worst_ktd, y = 'Freq', fill = deputy)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
mydata <- as.data.frame(HairEyeColor[, , "Female"])
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
#
binom.test(x = 5, n = 20, p = 0.5)
binom.test(t1)
#
binom.test(x = 5, n = 20, p = 0.5)
binom.test(t1)
#### Chi-Square __________________________________________________________ ####
t1
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp
chi$obs
t2
chisq.test(t2)
t2
chisq.test(t2)
chisq.test(yt_t2)
fisher.test(t2)
df12 <-  HairEyeColor["Brown", , "Female"]
df12
t2
HairEyeColor
df12
t12 <- table(df12)
t12
t12
chisq.test(df12)
diamonds
# 1
df13 <- as.data.frame(diamonds[c('cut', 'color')])
diamonds
View(df13)
chi <- chisq.test(x = df13$cut, y = df13$color)
chi
chi$statistic
table(diamonds$cut, diamonds$color)
diamods_table <- table(diamonds$cut, diamonds$color)
chi_result <- chisq.test(diamods_table)
main_stat <- chi_result$statistic
chi_result
