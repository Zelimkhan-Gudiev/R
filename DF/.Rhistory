geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2 + geom_boxplot()
ggplot(yt, aes(x = duration)) +
geom_histogram(fill = "white", col = "black", binwidth = 20) +
xlab("Длительность утверждения КТД, раб. дни") +
ylab("Количество КТД") +
ggtitle("Гистограмма длительности утверждения КТД")
ggplot(zakupki, aes(x = status))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(zakupki, aes(x = 'status'))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
str(zakupki)
ggplot(zakupki, aes(x = 'status'))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_dotplot(binwidth = 15)+
xlab("Длительность") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = duration, fill = kind_tz)) +
geom_density(alpha = 0.5) +
xlab("Длительность") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Гистограмма длительности")
ggplot(yt, aes(x = numb_ret_oiv)) +
geom_density(fill = "red")
ggplot(yt, aes(x = numb_ret_depir, fill = kind_tz)) +
geom_density(alpha = 0.5) +
xlab("Количестово возвратов от ДЭПиР") +
ylab("Количество КТД")+
scale_fill_discrete("Вид ТЗ") +
ggtitle("Количество возрвратов от ДЭПиР")
plot_durarion_other_var <- ggplot(yt, aes(x = duration, y = numb_ret_depir, col = kind_tz, size = numb_ret_oiv)) +
geom_point() +
xlab("Длительность") +
ylab("Количество возвратов от ДЭПиР") +
scale_color_discrete("Вид ТЗ") +
scale_size_continuous("Количество возрвратов от ОИВ") +
ggtitle('Взаимосвязь длительности разработки, количество возрвратов от ДЭПиР, вида ТЗ и количество возрвратов от ОИВ')
plot_durarion_other_var
ggplot(yt, aes(x = duration, y = numb_ret_depir, col = kind_tz, size = numb_ret_oiv)) +
geom_point() +
xlab("Длительность") +
ylab("Количество возвратов от ДЭПиР") +
ggtitle('Взаимосвязь длительности разработки, количество возрвратов от ДЭПиР, вида ТЗ и количество возрвратов от ОИВ')
airquality
str(airquality)
airquality$Month <- factor(airquality$Month)
# 1
ggplot(airquality, aes(x = Month, y = Ozone)) +
geom_boxplot()
#
ggplot(yt, aes(x = kind_tz, y = duration)) +
geom_boxplot()
# 2
boxplot (Ozone ~ Month, airquality)
# 3
ggplot(na.exclude(airquality), aes(x = as.factor(Month), y = Ozone))+
geom_boxplot(fill = "red", alpha = 0.5)+
xlab("Month")
ggplot(mtcars, aes(x = mpg, y = disp, col = hp)) +
geom_point()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species, size = Petal.Length)) +
geom_point()
table(zakupki$status)
dim(zakupki)
prop.table(zakupki$status)
t2 <- table(zakupki$status, zakupki$KPGZ_SUM)
t2
t1 <- table(zakupki$status)
t1
install.packages("tidyverse")
library(dplyr)
remove(list = ls())
df <- read.csv('grants.csv')
yt <- read.csv2("yt.csv")
df$status <- as.factor(df$status)
levels(df$status) <- c("Not funded", "Funded")
df$status <- factor(df$status, labels = c("Not funded", "Funded"))
df$status
#### Step 3: 1d Table __________________________________________________________ ####
t1 <- table(df$status)
t1
dim(t1)
#### Step 3: yt (1d Table) __________________________________________________________ ####
table(yt$deputy)
table(yt$kind_tz)
#### Step 4: 2d Table __________________________________________________________ ####
t2 <- table(df$status, df$field)
t2
t2 <- table(status = df$status, field = df$field)
t2
dim(t2)
prop.table(t2)
prop.table(t2, 1)
prop.table(t2, 2)
prop.table(t2, 2) * 100
round(prop.table(t2, 2),2)
round(prop.table(t2, 2) *100, 1)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
yt_t1 <- as.data.frame(yt_t1)
View(yt_t1)
#
yt$ktd[yt$top_worst_ktd == '1']
yt$ktd[yt$top_worst_ktd == '2']
yt <- yt %>%
mutate(tru = case_when(
startsWith(ktd, "П") ~ "Поставка товра",
startsWith(ktd, "В") ~ "Выполнение работ",
startsWith(ktd, "О") ~ "Оказание услуг",
))
View(yt)
yt <- read.csv2("yt.csv")
View(yt)
zakupki <- zakupki %>%
mutate(tru = case_when(
startsWith(NAME, "01.") ~ "Поставка товра",
startsWith(NAME, "02.") ~ "Выполнение работ",
startsWith(NAME, "03.") ~ "Оказание услуг",
))
####  ####
zakupki <- read.csv2("2022.05.17 size st (mac).csv")
zakupki_f_names <- c('isFinal_kpgz', 'status', 'IS_STANDARD_PRODUCT')
zakupki[, zakupki_f_names] <- lapply(zakupki[, zakupki_f_names], factor)
zakupki <- zakupki %>%
mutate(tru = case_when(
startsWith(NAME, "01.") ~ "Поставка товра",
startsWith(NAME, "02.") ~ "Выполнение работ",
startsWith(NAME, "03.") ~ "Оказание услуг",
))
View(zakupki)
zakupki <- zakupki %>%
mutate(tru = case_when(
startsWith(CODE, "01.") ~ "Поставка товра",
startsWith(CODE, "02.") ~ "Выполнение работ",
startsWith(CODE, "03.") ~ "Оказание услуг",
))
table(zakupki$status, zakupki$tru)
# Корректировка yt$deputy
yt$ktd[yt$deputy == '']
yt$teamleader[yt$ktd == "Поставка химических веществ"]
yt$teamleader[yt$ktd == "Поставка мебели детской и ученической"]
yt$teamleader[yt$ktd == "Поставка учебного оборудования для музыкального класса, закупаемого в рамках проекта «Техносфера современной школы»"]
#### Step 4: 3d Table __________________________________________________________ ####
t3 <- table(Years = df$years_in_uni, Field = df$field, Status = df$status)
t3
dim(t3)
yt_t1 <- table('Заместитель' = yt$deputy, 'Уровень наихудших КТД' = yt$top_worst_ktd)
yt_t1 <- as.data.frame(yt_t1)
dim(yt_t1)
prop.table(yt_t1, 1)
prop.table(yt_t1, 2)
yt_t1 <- as.data.frame(yt_t1)
dim(yt_t1)
prop.table(yt_t1, 1)
prop.table(yt_t1, 2)
yt_t2 <- table('ТРУ' = yt$tru, 'Уровень наихудших КТД' = yt$top_worst_ktd)
yt_t2 <- as.data.frame(yt_t2)
table('ТРУ' = yt$tru, 'Уровень наихудших КТД' = yt$top_worst_ktd)
# К частям таблицы можно обращаться так же, как и к матрицам.
# HairEyeColor - таблица с данными, встроенными в R. Посмотрите на неё в R. Команда
dimnames(HairEyeColor)
HairEyeColor
# К частям таблицы можно обращаться так же, как и к матрицам.
# HairEyeColor - таблица с данными, встроенными в R. Посмотрите на неё в R. Команда
dimnames(HairEyeColor)
# позволит нам посмотреть, какие измерения есть в этой таблице и как они называются. Например, чтобы обратиться к части таблицы,
# в которой хранятся данные только о мужчинах, нам нужно выполнить следующую команду:
HairEyeColor[ , ,'Male']
HairEyeColor[ , "Blue",'Male'] # обращение к части таблицы, в которой хранятся данные только о мужчинах с голубыми глазами
# Ваша задача в переменную red_men сохранить долю рыжеволосых (Red) от общего числа голубоглазых мужчин.
# Обратите внимание, что нужны не проценты, а просто доля, то есть десятичная дробь  (например, не 10%, а 0.1).
# Дополните код, чтобы получить верный ответ.
HairEyeColor <- HairEyeColor
red_men <- prop.table(HairEyeColor[, , "Male"], 1)
red_men
roundred_men, 1)
round(red_men, 1)
red_men <- prop.table(HairEyeColor[, , "Male"], 2)
round(red_men, 1)
red_men <- prop.table(HairEyeColor[, , "Male"], 1)
round(red_men, 1)
prop.table(HairEyeColor["Red", , "Male"], 3)
prop.table(HairEyeColor["Red", , "Male"], 3)
red_men <- prop.table(HairEyeColor[, , "Male"], 2)
round(red_men, 1)
#
red_man <- HairEyeColor['Red', 'Blue', 'Male']
red_man
blue_eyes_man <- HairEyeColor[, "Blue", 'Male']
red_man_sum <- sum(red_man)
blue_eyes_man_sum <- sum(blue_eyes_man)
red_men <- red_man_sum / blue_eyes_man_sum
red_men
round(red_men, 1)
round(red_men, 2)
round(red_men, 3)
HairEyeColor['Red', 'Blue', 'Male']
HairEyeColor[, "Blue", 'Male']
sum(red_man)
sum(blue_eyes_man)
red_man_sum / blue_eyes_man_sum
#
prop.table(HairEyeColor[, , 'Male'], 2)['Red', 'Blue']
prop.table(HairEyeColor[, , 'Male'], 2)
#
prop.table(HairEyeColor[, , 'Male'], 2)['Red', 'Blue']
#
prop.table(HairEyeColor[,'Blue','Male'])['Red']
prop.table(HairEyeColor[,'Blue','Male'])
prop.table(HairEyeColor[ , 'Blue' ,'Male'])[['Red']]
#
male <- HairEyeColor[ , ,'Male']
HairEyeColor[ , ,'Male']
HairEyeColor
prop.table(male, 2)
str[3,2]
str <- prop.table(male, 2)
str[3,2]
#
prop.table(HairEyeColor[,2,1], )[3]
HairEyeColor[,2,1]
prop.table(HairEyeColor[,2,1], )[3]
sum(HairEyeColor[, "Green", "Female"])
barplot(t1)
barplot(t2)
barplot(t2)
t1 <- table(zakupki$status)
t2 <- table(zakupki$status, zakupki$tru)
dim(zakupki)
prop.table(zakupki$status)
barplot(t2)
barplot(t2, fill = status)
barplot(t2, fill = 'status')
barplot(t2, fill = 'status', legend.text = T)
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'))
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'), beside = T)
mosaicplot(t2)
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'), beside = T)
6500000/24
4500000/24
62000*107
6634000/24
#### Step 8: Exircises __________________________________________________________ ####
# Постройте столбчатую диаграмму распределения цвета глаз по цвету волос только у женщин из
# таблицы HairEyeColor. По оси X должен идти цвет волос, цвет столбиков должен отражать цвет глаз. По оси Y - количество наблюдений.
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame:
mydata <- as.data.frame(HairEyeColor)
dim(mydata)
mydata
View(mydata)
mydata <- as.data.frame(HairEyeColor[, , "Female"])
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
ggplot(data = zakupki, aes(x = tru, y = Freq, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
t2 <- table(zakupki$status, zakupki$tru)
t2
prop.table(zakupki$status)
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'))
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'), beside = T)
obj
mydata
ggplot(data = zakupki, aes(x = tru, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = tru, y = zakupki$KPGZ_SUM, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = tru, y = PGZ_SUM, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = tru, y = PGZ_SUM, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = tru, y = KPGZ_SUM, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
barplot(t2, fill = 'status', legend.text = T, args.legend = list(x = 'topright'), beside = T)
ggplot(data = zakupki, aes(x = tru, y = CON_COUNT, fill = status)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "identity", position = "dodge")
obj
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat = "count", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
ggplot(data = yt, aes(x = top_worst_ktd, y = 'Freq', fill = deputy)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "count", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "prop", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = zakupki, aes(x = 'tru', y = 'CON_COUNT', fill = 'status')) +
geom_bar(stat = "prop", position = "dodge") +
scale_fill_manual(values = c("Brown", "Blue", "Darkgrey", "Darkgreen"))
#
binom.test(x = 5, n = 20, p = 0.5)
binom.test(t1)
#### Step 3: 1d Table __________________________________________________________ ####
t1 <- table(df$status)
t1
dim(t1)
#### Step 4: 2d Table __________________________________________________________ ####
t2 <- table(df$status, df$field)
t2
t2 <- table(status = df$status, field = df$field)
t2
#
binom.test(x = 5, n = 20, p = 0.5)
binom.test(t1)
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp
chi$obs
chi <- chisq.test(t1)
chi
fisher.test(t2)
df12 <-  HairEyeColor["Brown", , "Female"]
df12
HairEyeColor
HairEyeColor["Brown", , "Female"]
t12 <- table(df12)
t12
chisq.test(df12)
table(diamonds$cut, diamonds$color)
diamonds
diamods_table
diamods_table <- table(diamonds$cut, diamonds$color)
chi_result <- chisq.test(diamods_table )
main_stat <- chi_result$statistic
diamods_table
chi_result
main_stat
#### Step 14: Exircises __________________________________________________________ ####
#1
df14 <- as.data.frame(diamonds[, c('price', 'carat')])
df14$factor_price <- ifelse(diamonds$price >= mean(diamonds$price), 1, 0)
df14$factor_carat <- ifelse(diamonds$carat >= mean(diamonds$carat), 1, 0)
df14_1 <- as.data.frame(df14[, c('factor_price', 'factor_carat')])
main_stat <- chisq.test(df14_1$factor_price, df14_1$factor_carat)$statistic
df14
df14$factor_price <- ifelse(diamonds$price >= mean(diamonds$price), 1, 0)
df14$factor_price
df14$factor_carat <- ifelse(diamonds$carat >= mean(diamonds$carat), 1, 0)
df14$factor_carat
df14_1
main_stat
chisq.test(df14_1$factor_price, df14_1$factor_carat)
remove(list = ls())
df  <- iris
View(df)
str(df)
df1  <- subset(df, Species != "setosa")
str(df1)
table(df1$Species)
hist(df1$Sepal.Length)
ggplot(df1, aes(x =Sepal.Length ))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)+
facet_grid(Species ~ .)
ggplot(df1, aes(Sepal.Length, fill = Species ))+
geom_density(alpha = 0.5)
ggplot(df1, aes(Species, Sepal.Length))+
geom_boxplot()
shapiro.test(df1$Sepal.Length)
shapiro.test(df1$Sepal.Length[df1$Species == "versicolor"])
shapiro.test(df1$Sepal.Length[df1$Species == "virginica"])
#The same result in one line
by(df1$Sepal.Length, INDICES = df1$Species, shapiro.test)
bartlett.test(Sepal.Length  ~ Species, df1)
t.test(Sepal.Length  ~ Species, df1)
test1  <- t.test(Sepal.Length  ~ Species, df1)
test1
str(test1)
test1$p.value
t.test(Sepal.Length  ~ Species, df1, var.equal = T)
t.test(df1$Sepal.Length, mu = 8)
t.test(df1$Petal.Length, df1$Petal.Width, paired = T)
ggplot(df1, aes(Species, Sepal.Length))+
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
width = 0.1)+
stat_summary(fun.y = mean, geom = "point", size = 4)
TG <- ToothGrowth.
TG <- ToothGrowth
View(TG)
View(TG)
View(TG)
View(TG)
rm(TG)
tg <- ToothGrowth
tg <- subset(tg)
tg <- subset(tg, supp == OJ & dose == 0.5 | supp == VC & dose == 2.0)
tg <- subset(tg, supp == 'OJ' & dose == 0.5 | supp == 'VC' & dose == 2.0)
tg <- ToothGrowth
write.csv2(tg)
write.csv2(tg, "tg.csv")
tg <- subset(tg, supp == 'OJ' & dose == 0.5 | supp == 'VC' & dose == 2.0)
t.test(len ~ supp)
t.test(len ~ supp, tg)
ggplot(df1, aes(x =Sepal.Length ))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)+
facet_grid(Species ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.4) +
facet_grid(supp ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.9) +
facet_grid(supp ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 2) +
facet_grid(supp ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 4) +
facet_grid(supp ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 3) +
facet_grid(supp ~ .)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 2) +
facet_grid(supp ~ .)
t.test(len ~ supp, tg)
t_stat <- t.test(len ~ supp, tg)$stat
t.test(len ~ supp, tg)$stat
lek <-
read.csv2('lekarstva.csv')
View(lek)
lek <-
read.csv('lekarstva.csv')
View(lek)
lek <- read.csv('lekarstva.csv')
t.test(lek$Pressure_before, lek$Pressure_after, paired = T)
read.table("2.2 dataset_11504_11.txt")
read.table("2.2 dataset_11504_15.txt")
ds <- read.table("2.2 dataset_11504_15.txt")
bartlett.test(ds$V1, ds$V2)
ggplot(tg, aes(x = len)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 2) +
facet_grid(supp ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 2) +
facet_grid(V2 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 4) +
facet_grid(V2 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 1) +
facet_grid(V2 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.5) +
facet_grid(V2 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.4) +
facet_grid(V2 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.4) +
facet_grid(V1 ~ .)
#
ggplot(ds, aes(x = V1)) +
geom_histogram(fill = 'white', col = 'black', binwidth = 0.4) +
facet_grid(V2 ~ .)
bartlett.test(ds$V1, ds$V2)
t.test(ds$V1, ds$V2, paired = T)
t.test(ds$V1, ds$V2)
ds <- read.table("2.2 dataset_11504_15.txt")
bartlett.test(ds$V1, ds$V2)
t.test(ds$V1, ds$V2)
ds <- read.table("dataset_11504_15.txt")
bartlett.test(ds$V1, ds$V2)
t.test(ds$V1, ds$V2)
ds <- read.table("dataset_11504_15.txt")
bartlett.test(ds$V1, ds$V2)
wilcox.test(ds$V1, ds$V2)
