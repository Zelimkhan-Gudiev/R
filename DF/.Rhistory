sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
sum(
(
iq - mean(iq)
)^2
)
sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssx
ssx <- sum(
(
height_inch - mean(height_inch)
)^2
)
ssx <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
# ssy
ssy <- sum(
(
iq - mean(iq)
)^2
)
ssy <- sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssxy
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq))) # 24.5
ssxy/sqrt(ssx * ssy)
r <-  ssxy/sqrt(ssx * ssy)
r
ssxy
ssx
ssy
24.5/sqrt(124.9 * 264.5)
ssxy/sqrt(ssx * ssy)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
n <- 10
t <-  r * sqrt(n - 2)/sqrt(1 - r^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
sum(height_inch)
sum(height_inch^2)
sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
my_calc  <- function(x, y){
s  <- x + y
return(s)
}
my_calc(x = 10, y = 15)
result  <- my_calc(10, 15)
my_calc_2  <- function(x, y){
s  <- x + y
d  <- x - y
return(c(s, d))
}
my_calc_2(10, 15)
my_calc_3  <- function(x, y, z){
s  <- x + y + z
d  <- x - y - z
return(c(s, d))
}
my_calc_3
my_calc_3(1, 2)
my_calc_3(1, 2, 3)
my_calc_3  <- function(x, y, z = 10){
s  <- x + y + z
d  <- x - y - z
return(c(s, d))
}
my_calc_3(1, 2)
distr1  <- rnorm(100)
hist(distr1)
distr1[1:30]  <- NA
remove(list = ls())
distr1  <- rnorm(100)
distr1
hist(distr1)
distr1[1:30]  <- NA
distr1
distr1[is.na(distr1)]
distr1[is.na(distr1)]  <- mean(distr1, na.rm = T)
distr1[is.na(distr1)]
distr1[is.na(distr1)]
distr1[1:30]
my_na_rm  <- function(x){
if (is.numeric(x)){
stat_test  <- shapiro.test(x)
if (stat_test$p.value > 0.05){
x[is.na(x)]  <- mean(x, na.rm = T)
print("NA values were replaced with mean")
} else{
x[is.na(x)]  <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
} else{
print("X is not numeric")
}
}
d1  <- rnorm(2000)
d2  <- runif(2000)
d1[1:10]  <- NA
d2[1:10]  <- NA
d1  <- my_na_rm(d1)
head(d1)
d2  <- my_na_rm(d2)
head(d2)
d1
d1  <- my_na_rm(d1)
source('my_na_rm.r')
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")
source('my_na_rm.R')
source('my_na_rm.R')
source('my_na_rm.R')
source('/Users/zelimkhan/Desktop/Data/GitHub/my_na_rm.R')
rm(my_na_rm)
source('/Users/zelimkhan/Desktop/Data/GitHub/my_na_rm.R')
NA.position(c(1, 2, 3, NA, NA))
is.na(c(1, 2, 3, NA, NA))
my_vector <- c(1, 2, 3, NA, NA)
my_vector[is.na == T]
my_vector[my_vector == NA]
my_vector[my_vector == is.na()]
my_vector[NA]
my_vector[my_vector = "NA"]
my_vector[my_vector = is.na]
which(my_vector == NA)
which(my_vector)
which(my_vector == NA)
which(my_vector == 'NA')
?which()
which(my_vector, is.na == T)
which(my_vector, is.na(my_vector) == T)
which(my_vector, is.na(my_vector)
which(my_vector, is.na(my_vector))
which(my_vector == NA)
which(my_vector == 'NA')
which(my_vector == 1)
my_vector <- c(1, 3, 2, NA, NA)
which(my_vector == 2)
which(my_vector == is.na())
for (i in 1:length(my_vector)) {
if(is.na(my_vector[i]) == T) {
print(i)
}
}
which(is.na(my_vector[i]) == T)
which(is.na(my_vector) == T)
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
}
}
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
}
}
}
NA.position(my_vector)
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
print(x[i])
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(x[i])
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
return(i)
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
y <- x[i]
return(y)
}
}
}
NA.position(my_vector)
y <- c()
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
y <<- x[i]
return(y)
}
}
}
NA.position(my_vector)
y <- x[i]
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
y <- x[i]
return(y)
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
return(i)
}
}
}
NA.position(my_vector)
my_vector <- c(1, 2, 3, NA, NA)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
return(i)
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
#
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
naVector <- x[i]
return(naVector)
}
}
}
NA.position(my_vector)
#
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
naVector <- c(x[i])
return(naVector)
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
#
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
return(x[i])
}
}
}
NA.position(my_vector)
return(v1 <- x[i])
#
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
return(v1 <- x[i])
}
}
}
NA.position(my_vector)
NA.position <- function(x) {
for(i in 1:length(x)) {
if(is.na(x[i]) == T) {
print(i)
}
}
}
NA.position(my_vector)
#
function(vec){return(c(which(T == is.na(vec))))}
#
which(is.na(my_vector))
#
naVec <- which(is.na(my_vector))
naVec
which(is.na(my_vector))
#
NA.position <- function(x) {
which(is.na(my_vector))
return(which(is.na(my_vector)))
}
NA.position(my_vector)
NA.counter <- function(x) {
sumNa <- sum(is.na(x))
return(sumNa)
}
rnorm(100)
distr8 <- rnorm(100)
distr8[1:10] <- NA
distr8
NA.counter(distr8)
filtered.sum <- function(x) {
sumP <- sum(x[x > o])
return(sumP)
}
vector10 <- c(-2:2)
vector10
filtered.sum(vector10)
filtered.sum(vector10)
filtered.sum <- function(x) {
sumP <- sum(x[x > o])
return(sumP)
}
vector10 <- c(-2:2)
filtered.sum(vector10)
filtered.sum(vector10)
filtered.sum <- function(x) {
sumP <- sum(x[x > 0])
return(sumP)
}
vector10 <- c(-2:2)
filtered.sum(vector10)
filtered.sum <- function(x) {
sumP <- sum(x[x > 0])
return(sumP)
}
vector10 <- c(-2:2)
filtered.sum(vector10)
filtered.sum <- function(x) {
return(sum(x[x > 0]))
}
vector10 <- c(-2:2)
filtered.sum(vector10)
vector10 <- c(-2:3)
filtered.sum(vector10)
vector10 <- c(-3, NA, -1, 0, 1, 2, 3)
filtered.sum(vector10)
filtered.sum <- function(x) {
return(sum(x[x > 0], na.rm = T))
}
vector10 <- c(-3, NA, -1, 0, 1, 2, 3)
filtered.sum(vector10)
sumP <- sum(x[x > 0], na.rm = T)
outliers.rm <- function(x) {
return(ifelse(x < 1.5 * IQR(x) | x > 1.5 * IQR(x), 0, x))
}
rnorm(100, mean = 50)
distr11 <- rnorm(100, mean = 50)
sd(distr11)
distr11 <- rnorm(100, mean = 50, sd = 5)
sd(distr11)
outliers.rm(distr11)
IQR(distr11)
5.534759*1.5
ifelse(distr11 < 1.5 * IQR(distr11) | distr11 > 1.5 * IQR(distr11), 0, distr11)
quantile(distr11, probs = c(0.25, 0.75))
distr11 <- rnorm(100, mean = 50, sd = 5)
sd(distr11)
quantile(distr11, probs = c(0.25, 0.75))
q <- quantile(distr11, probs = c(0.25, 0.75))
q
i <- IQR(distr11)
q2 <- quantile(distr11, probs = 0.25)
q2
q1 <- quantile(distr11, probs = 0.25)
q2 <- quantile(distr11, probs = 0.75)
ifelse(distr11 < 1.5 * i + q1 | distr11 > 1.5 * i + q2, 0, distr11)
outliers.rm <- function(x) {
return(ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(distr11, probs = 0.75), 0, x))
}
outliers.rm(distr11)
ifelse(distr11 < 1.5 * IQR(distr11) + quantile(distr11, probs = 0.25) | distr11 > 1.5 * IQR(distr11) + quantile(distr11, probs = 0.75), 0, distr11)
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(distr11, probs = 0.75), 0, x))
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(distr11, probs = 0.75), 0, x)
return(x[x != 0])
}
outliers.rm(distr11)
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75), 0, x)
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75), 0, x)
return(x[x != 0])
}
outliers.rm(distr11)
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75), 0, x)
x <- x[x !=0]
return(x)
}
outliers.rm(distr11)
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75), 0, x)
x <- x[x !=0]
return(x)
}
outliers.rm(distr11)
distr11
outliers.rm(distr11)
#
as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " ")))
#
v111 <- as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " ")))
v111
#
v111 <- as.numeric(unlist(strsplit("-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19", " ")))
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
v1111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, -1.69, -1.08, -0.47, 0.82, -0.25, 0.19, 0.69, 1.95, -0.01, 0.27, -0.82, -0.41, 0.93, -2.97, 1.36, -0.78, -0.42, 0.19)
outliers.rm(v111)
outliers.rm(distr11)
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
outliers.rm(v111)
x <- v111
x[x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75)]
x
x[x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75)]
v1111
x1 <- x[x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75)]
x1 == x
#v2
outliers.rm <- function(x) {
x <- x[x < 1.5 * IQR(x) + quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75)]
return(x)
}
outliers.rm(v111)
# sample output
v1111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, -1.69, -1.08, -0.47, 0.82, -0.25, 0.19, 0.69, 1.95, -0.01, 0.27, -0.82, -0.41, 0.93, -2.97, 1.36, -0.78, -0.42, 0.19)
v1111
#v2
outliers.rm <- function(x) {
x <- x[x > 1.5 * IQR(x) + quantile(x, probs = 0.25) | x < 1.5 * IQR(x) + quantile(x, probs = 0.75)]
return(x)
}
outliers.rm(v111)
v1111
#v2
outliers.rm <- function(x) {
x <- x[x > 1.5 * IQR(x) + quantile(x, probs = 0.25) & x < 1.5 * IQR(x) + quantile(x, probs = 0.75)]
return(x)
}
outliers.rm(v111)
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
outliers.rm(v111)
#v2
outliers.rm <- function(x) {
x <- x[x < 1.5 * IQR(x) + quantile(x, probs = 0.25) & x > 1.5 * IQR(x) + quantile(x, probs = 0.75)]
return(x)
}
outliers.rm(v111)
x[x > 1.5 * IQR(x) + quantile(x, probs = 0.25) & x < 1.5 * IQR(x) + quantile(x, probs = 0.75)]
