str(airquality)
describeBy(yt$duration, yt$teamleader)
# Вариант 1
describeBy(airquality, group = 'Month') # 0.04
# Вариант 2
describeBy(airquality, airquality$Month == 8)[['TRUE']]['Wind','skew']
# Вариант 3
describeBy(airquality$Wind, airquality$Month == 8)$'TRUE'['skew']
# Вариант 4
describeBy(airquality$Wind, group=airquality$Month == 8)
# Вариант 5
describeBy(x = airquality, na.rm=T, group = airquality$Month, mat = T)
# Вариант 6
describeBy(x = subset(airquality, Month==8)$Wind, group = subset(airquality, Month == 8)$Month, digits = 1)
# Вариант 7
subset(describeBy(airqualityWind, group = airqualityWind,group=airqualityMonth == 8, mat = T), group1 == 'TRUE')['skew']
# Вариант 8
round(skew(airquality$Wind[airquality$Month == 8], na.rm = T),2)
# Вариант 9
describeBy(airquality,group = list(airquality$Month))
# Вариант 10
aggregate(Wind ~ Month, subset(airquality, Month %in% c(8)), skew)
# Вариант 11
d3 <- describeBy(x = airquality, group = airquality$Month)
d3$`8`[3, "skew"]
# Вариант 12
aggregate(Wind ~ Month, airquality, skew)
# Вариант 13
skew <- describeBy(airquality$Wind, airquality$Month==8)$'TRUE'['skew'][1,1]
# Вариант 13
df1 <- airquality
z <- describeBy(x = df1, group = df1$Month)
z[["8"]]
# Вариант 14
df <- airquality
df2 <- describeBy(df, group = df$Month, mat = T)
# Вариант 15
tmp <- describeBy(airquality, group = airquality$Month, mat = T)
View(tmp)
# Вариант 16
describeBy(x = airquality[, -c(5,6)], group = airquality$Month, mat = T)
# Вариант 17
a <- airquality
b <- describeBy(x = a[ ,-5], group = a$Month, mat = T)
b[14, 'skew']
#### Step 13 of 15 ####
# Обратимся к встроенным данным iris. Соотнесите значения стандартного отклонения переменных.
# Вариант 1
sd(iris$Sepal.Length)
sd(iris$Sepal.Width)
sd(iris$Petal.Length)
sd(iris$Petal.Length)
# Вариант 2
describe(iris)['sd']
# Вариант 3
subset(describe(iris), select = sd)
# Вариант 4
z <- describe(x = iris[1:4], fast = T)
zz <- subset(z, select = sd)
# Вариант 5
describe(iris)
# Вариант 6
sapply(iris[1:4], sd)
# Вариант 7
aggregate(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width ) ~ 1, iris, sd)
# Вариант 8
sapply(iris[1:4], FUN=sd)
# Вариант 9
SD(iris)
# Вариант 10
describeBy(x=iris, group = iris$Sepal.Length & iris$Sepal.Width)
# Вариант 11
apply(iris[,1:4], 2, sd)
# Вариант 12
describe(iris[,-c(5)])["sd"]
# Вариант 13
for (v in 1:4) {sd_v[v] <-  sd(iris[,v])}
# Вариант 14
library(dplyr)
library(psych)
arrange(describe(iris, digits =2)[ ,'sd', drop=F])
# Вариант 15
aggregate(iris$Sepal.Length ~ Species, iris, sd)
# Вариант 14
arrange(describe(iris, digits =2)[ ,'sd', drop=F])
# Вариант 14
arrange(describe(iris, digits = 2)[ ,'sd', drop=F])
# Вариант 14
arrange(describe(iris, digits = 1)[ ,'sd', drop=F])
describe(iris)["median"]
remove(list = ls())
#v1
outliers.rm <- function(x) {
x <- ifelse(x < 1.5 * IQR(x) - quantile(x, probs = 0.25) | x > 1.5 * IQR(x) + quantile(x, probs = 0.75), 0, x)
x <- x[x != 0]
return(x)
}
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
outliers.rm(v111)
v111
outliers.rm(v111)
#v2
outliers.rm <- function(x) {
x <- x[x > 1.5 * IQR(x) - quantile(x, probs = 0.25) & x < 1.5 * IQR(x) + quantile(x, probs = 0.75)]
return(x)
}
outliers.rm(v111)
#v3
outliers.rm <- function(x){
out_vec <- boxplot.stats(x)$out
return(x[-which(x %in% out_vec)])
}
outliers.rm(v111)
# sample output
v1111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, -1.69, -1.08, -0.47, 0.82, -0.25, 0.19, 0.69, 1.95, -0.01, 0.27, -0.82, -0.41, 0.93, -2.97, 1.36, -0.78, -0.42, 0.19)
v111
v1111
#
outliers.rm <- function(x){
x <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
return(x)
}
outliers.rm(v111)
# sample output
v1111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, -1.69, -1.08, -0.47, 0.82, -0.25, 0.19, 0.69, 1.95, -0.01, 0.27, -0.82, -0.41, 0.93, -2.97, 1.36, -0.78, -0.42, 0.19)
v1111
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- c(x1, x2)
return(x)
}
outliers.rm(v111)
v1111
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- c(x1, x2)
return(x)
}
v111
outliers.rm(v111)
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- x[- c(x1, x2)]
return(x)
}
outliers.rm(v111)
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- x[-which(x %in% out_vec)]
return(x)
}
outliers.rm(v111)
#v3
outliers.rm <- function(x){
out_vec <- boxplot.stats(x)$out
return(x[-which(x %in% c(x1, x2))])
}
outliers.rm(v111)
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- x[-which(x %in% c(x1, x2))]
return(x)
}
outliers.rm(v111)
#
outliers.rm <- function(x){
x1 <- x[-which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[-which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- x[-which(x %in% c(x1, x2))]
return(x)
}
outliers.rm(v111)
#5
outliers.rm <- function(x){
x1 <- x[which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- c(x1, x2)
return(x)
}
outliers.rm(v111)
v111
n
#5
outliers.rm <- function(x){
x1 <- x[which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- c(x1, x2)
return(x)
}
outliers.rm(v111)
x
#5
outliers.rm <- function(x){
x1 <- x[which(x<(as.numeric(quantile(x, probs = c(0.25, 0.75))[2] + (1.5*IQR(x)))))]
x2 <- x[which(x>(as.numeric(quantile(x, probs = c(0.25, 0.75))[1] - (1.5*IQR(x)))))]
x <- x[which(x1, x2))
return(x)
}
outliers.rm(v111)
#
v111 <- as.numeric(unlist(strsplit("16.3 8.13 22.92 19.84 22.64 22.43 27.66 12.06 21.19 24.08 12.89 16.82 27.1 15.11 30.0 21.75 17.99 20.48 25.77 18.49 16.68 22.2 17.17 11.9 17.48 7.37 18.84 27.57 21.24 26.33 19.56 17.11 11.29 12.1 16.95 15.8", " ")))
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
# sample output
v1111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, -1.69, -1.08, -0.47, 0.82, -0.25, 0.19, 0.69, 1.95, -0.01, 0.27, -0.82, -0.41, 0.93, -2.97, 1.36, -0.78, -0.42, 0.19)
outliers.rm(v111)
v111
v111_1 <- v111[-which(v111>(as.numeric(quantile(v111, probs = c(0.25, 0.75))[2] + (1.5*IQR(v111)))))]
v111_2 <- x[-which(v111<(as.numeric(quantile(v111, probs = c(0.25, 0.75))[1] - (1.5*IQR(v111)))))]
v111 <- v111[-which(v111 %in% c(v111_1, v111_2))]
v111_1 <- v111[-which(v111>(as.numeric(quantile(v111, probs = c(0.25, 0.75))[2] + (1.5*IQR(v111)))))]
v111_2 <- x[-which(v111<(as.numeric(quantile(v111, probs = c(0.25, 0.75))[1] - (1.5*IQR(v111)))))]
v111_2 <- v111[-which(v111<(as.numeric(quantile(v111, probs = c(0.25, 0.75))[1] - (1.5*IQR(v111)))))]
v111 <- v111[-which(v111 %in% c(v111_1, v111_2))]
v111_1
v111
v111
v111
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
v111
v111_1
v111_2
v111 <- v111[-which(v111 %in% c(v111_1, v111_2))]
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
v111 <- v111[-which(v111 %in% c(v111_1))]
v111 <- v111[-which(v111 %in% c(v111_2))]
v111
#6
outliers.rm <- function(x){
mod_x <<- c()
for(i in 1:length(x)){
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
if (x[i]<(q1+1.5*IQR(x))|x[i]>(q2-1.5*IQR(x))) {
mod_x <<- append(mod_x, x[i])
return(x)
}
}
}
outliers.rm(v111)
# sample input
v111 <- c(-0.73, 0.08, 1.04, 0.09, 1.01, 6.11, -1.69, -1.08, -0.47, 0.82, -0.25, 13.91, -6.39, 0.19, 0.69, 1.95, -0.01, 0.27, 6.52, -0.82, -0.41, 0.93, -68.37, -2.97, 1.36, 3.7, -0.78, -0.42, -3.59, 0.19)
outliers.rm(v111)
v1111
#6
outliers.rm <- function(x){
mod_x <<- c()
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
for(i in 1:length(x)){
if (x[i]<(q1+1.5*IQR(x))|x[i]>(q2-1.5*IQR(x))) {
mod_x <<- append(mod_x, x[i])
return(x)
}
}
}
outliers.rm(v111)
v1111
#6
outliers.rm <- function(x){
mod_x <<- c()
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
for(i in 1:length(x)){
if (x[i]<(q1+1.5*IQR(x)) & x[i]>(q2-1.5*IQR(x))) {
mod_x <<- append(mod_x, x[i])
return(x)
}
}
}
outliers.rm(v111)
v1111
outliers.rm <- function(x){
mod_x <<- c()
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
iq <- 1.5*IQR(x)
for(i in 1:length(x)){
if (x[i]<(q1+iq) & x[i]>(q2-iq)) {
mod_x <<- append(mod_x, x[i])
return(x)
}
}
}
outliers.rm(v111)
v1111
#
outliers.rm <- function(x){
mod_x <<- c()
q1 <- quantile(x,probs=c(0.75))
q2 <- quantile(x,probs=c(0.25))
iq <- 1.5*IQR(x)
for(i in 1:length(x)){
if (x[i]<=(q1+iq) & x[i]>=(q2-iq)) {
mod_x <<- append(mod_x, x[i])
return(x)
}
}
}
outliers.rm(v111)
remove(list = ls())
my_calc  <- function(x, y){
s  <- x + y
return(s)
}
my_calc(x = 10, y = 15)
result  <- my_calc(10, 15)
result
my_calc_2  <- function(x, y){
s  <- x + y
d  <- x - y
return(c(s, d))
}
my_calc_2(10, 15)
my_calc_3  <- function(x, y, z){
s  <- x + y + z
d  <- x - y - z
return(c(s, d))
}
my_calc_3(1, 2, 3)
my_calc_3  <- function(x, y, z = 10){
s  <- x + y + z
d  <- x - y - z
return(c(s, d))
}
my_calc_3(1, 2)
distr1  <- rnorm(100)
hist(distr1)
distr1[1:30]  <- NA
distr1
distr1[is.na(distr1)]  <- mean(distr1, na.rm = T)
distr1
my_na_rm  <- function(x){
if (is.numeric(x)){
stat_test  <- shapiro.test(x)
if (stat_test$p.value > 0.05){
x[is.na(x)]  <- mean(x, na.rm = T)
print("NA values were replaced with mean")
} else{
x[is.na(x)]  <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
} else{
print("X is not numeric")
}
}
d1  <- rnorm(2000)
d2  <- runif(2000)
d1[1:10]  <- NA
d2[1:10]  <- NA
d1  <- my_na_rm(d1)
head(d1)
d2  <- my_na_rm(d2)
head(d2)
my_na_rm(d1)
my_na_rm(d2)
my_vector <- c(1, 2, 3, NA, NA)
which(is.na(my_vector) == T)
NA.position(my_vector)
#
NA.position <- function(x) {
which(is.na(my_vector))
return(which(is.na(my_vector)))
}
d1  <- rnorm(2000)
d1[1:10]  <- NA
which(is.na(d1))
#
is.na(d1)
d1[is.na()]
d1[is.na(d1)]
d1[is.na(d1) == T]
which(is.na(d1))
d1[is.na(d1)]
d1[is.na(d1) == T]
is.na(d1)
(any(is.na(d1)))
(any(is.na(d2)))
sd
mean
var
mean
methods(mean)
?methods
methods('mean')
length("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
list.files()
getwd()
list.files()
sd
var
mean
mean()
mean
remove(list = ls())
library(ggplot2)
library(psych)
library(dplyr)
getwd()
setwd("C:/Users/GudievZK/Desktop/GitHub/DF/")
setwd("/Users/zelimkhan/Desktop/Data/GitHub/DF/")
yt <- read.csv2("yt.csv")
df  <- mtcars
library(psych)
which(yt)
# yt
which(colnames(yt) == "duration")
which(colnames(yt))
corr.test(ytNum)
ytNum <- select_if(yt, is.numeric) %>%
ytNum <- yt[, -c("numb", "year_plan_st", "kvartal", "created_date", "date_end")]
ytNum <- yt[, -c(yt$numb, ytNum$year_plan_st, ytNum$kvartal, ytNum$created_date, ytNum$date_end)]
ytNum <- yt[, yt %in% ytNum0]
ytNum <- select_if(yt, is.numeric)
ytNum <- yt[, -c("numb", "year_plan_st", "kvartal", "created_date", "date_end")]
ytNum <- yt[, -c(yt$numb, ytNum$year_plan_st, ytNum$kvartal, ytNum$created_date, ytNum$date_end)]
ytNum <- select_if(yt, is.numeric)
ytNum <- yt[, -c("numb", "year_plan_st", "kvartal", "created_date", "date_end")]
ytNum <- yt[, -c(yt$numb, ytNum$year_plan_st, ytNum$kvartal, ytNum$created_date, ytNum$date_end)]
names(ytNum)
#v1
yt_n_names <- c('numb_ret_depir', 'numb_ret_oiv', 'time_plan', 'time_ac', 'time_rev_oiv',
'time_rev_depir', 'time_vn_sogl', 'time_depir', 'time_oiv',
'time_prep_rg', 'time_rg', 'time_mrg', 'time_eaist', 'duration')
yt[, yt_n_names] <- lapply(yt[, yt_n_names], as.numeric)
ytNum <- select_if(yt, is.numeric)
ytNum <- yt[, -c("numb", "year_plan_st", "kvartal", "created_date", "date_end")]
ytNum <- yt[, -c(yt$numb, ytNum$year_plan_st, ytNum$kvartal, ytNum$created_date, ytNum$date_end)]
corr.test(ytNum)
corr.test(df)
corr.test(x)
diag(corr.test(df))
corr.test(df)
diag(corr.test(df))
crdf <- corr.test(df)
crdf
diag(crdf)
crdf
crdf
str(crdf)
crdf
str(crdf)
corr.test(df)$r
diag( corr.test(df)$r)
crdf <- corr.test(df)$r
diag(crdf) <- 0
crdf
max(crdf)
abs(max(crdf))
x <- df
filtered.cor <- function(x){
library(dlyr)
library(psych)
x <- select_if(x, is.numeric)
crt <- corr.test(x)$r
diag(crt) <- 0
abs(max(crt))
}
filtered.cor(x)
filtered.cor <- function(x){
library(dlpyr)
library(psych)
x <- select_if(x, is.numeric)
crt <- corr.test(x)$r
diag(crt) <- 0
abs(max(crt))
}
}
filtered.cor <- function(x){
library(dlpyr)
library(psych)
x <- select_if(x, is.numeric)
crt <- corr.test(x)$r
diag(crt) <- 0
abs(max(crt))
}
filtered.cor(x)
filtered.cor <- function(x){
library(dplyr)
library(psych)
x <- select_if(x, is.numeric)
crt <- corr.test(x)$r
diag(crt) <- 0
abs(max(crt))
}
filtered.cor(x)
View(df)
df <- df[, c(1:3)]
corr.test(df)
corr.test(df)$r
crt <- corr.test(df)$r
diag(crt)
diag(crt) <- 0
crt
max(crt)
