sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
remove(list = ls())
getwd()
setwd("/Users/zelimkhan/Desktop/Data/GitHub/Statistica/")
chisq.test(c(20, 15), c(11, 12), c(7, 9))
chisq.test(bbb)$pvalue
attributes(chisq.test(bbb))
chi <- chisq.test(bbb)
chi <- chisq.test(bbb)
chi <- chisq.test(c(20, 15), c(11, 12), c(7, 9))
attributes(chi)
chi$p.value
chisq.test(c(20, 11,7), c(15, 12, 9))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
remove(list = ls())
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p-value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p-value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chi <- chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
chi$p.value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
remove(list = ls())
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
rbind(c(20, 15), c(11, 12), c(7, 9))
cbind(c(20, 15), c(11, 12), c(7, 9)
cbind(c(20, 15), c(11, 12), c(7, 9))
cbind(c(20, 15), c(11, 12), c(7, 9))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
male <- c(20,11,7)
female <- c(15,12,9)
names <- c("TORM", "PRITORM", "NETORM")
data.frame(male, female, row.names =names)
chi <- chisq.test(data.frame(male, female, row.names =names))
chi
bbb <- data.frame(male, female, row.names =names)
chi <- chisq.test(bbb)
#3
c(20,11,7)
data.frame(c(20,11,7), c(15,12,9), c("TORM", "PRITORM", "NETORM"))
data.frame(c(20,11,7), c(15,12,9), row.names = c("TORM", "PRITORM", "NETORM"))
data.frame(row.names = c("TORM", "PRITORM", "NETORM", c(20,11,7), c(15,12,9)))
data.frame(row.names = "TORM", "PRITORM", "NETORM", c(20,11,7), c(15,12,9)))
data.frame(c(20,11,7), c(15,12,9), row.names = c("TORM", "PRITORM", "NETORM"))
data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))
chisq.test(data.frame(data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))))
chisq.test(data.frame(data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))))$p.value
chisq.test(data.frame(row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)))$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)
)$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)
)$p.value
patients <- rbind(c(18, 7), c(6, 13))
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#воссоздадим таблицу
patients2 <- rbind(c(25, 1), c(3, 30))
#подпишем строки и столбцы
colnames(patients2) <- c("Yes", "No")
rownames(patients2) <- c("Placebo", "Aspirin")
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
knitr::opts_chunk$set(echo = TRUE)
x <- mtcars[,c("am", "vs")]
x <- mtcars[,c("am", "vs")]
x
table(x)
x1 <- table(x)
x1 < 5
any(x1 < 5)
chisq.test(x1)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
test_data
x <- test_data
x
contingency_cols <- sapply(x, table)
contingency_cols
chisq_for_cols <- apply(contingency_cols, 2, chisq.test)
chisq_for_cols <- apply(contingency_cols, 2, chisq.test)
chisq_for_cols
sapply(chisq_for_cols, "[", 3)
p_values
p_values <- sapply(chisq_for_cols, "[", 3)
p_values
x[which(p_values == min(unlist(p_values)))])
x[which(p_values == min(unlist(p_values)))]
unlist(p_values)
p_values
x1 <- apply(iris[, 1:4], 2, function(x)
ifelse(x >= mean(x, na.rm = T), 1, 0))
x1
apply(x1, 1, function(x)
ifelse(sum(x) >= 3, "Yes", "No"))
iris$important_cases <- as.factor(apply(x1, 1, function(x)
ifelse(sum(x) >= 3, "Yes", "No")))
num_cols <- sapply(iris, is.numeric)
num_cols
means <- colMeans(iris[num_cols])
means
colMeans(iris[num_cols]
colMeans(iris[num_cols]
colMeans(iris[num_cols])
res <- sweep(iris[num_cols], 2L, means, ">")
sweep(iris[num_cols], 2L, means, ">")
factor(rowSums(res) >= 3, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
library(dplyr)
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x))
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x)) %>%
rowSums()
ir <- iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x)) %>%
rowSums()
ir
factor(ifelse(ir > 2, 'Yes', 'No'))
test_data <- data.frame(V1 = c(16, 21, 18),
V2 = c(17, 7, 16),
V3 = c(25, 23, 27),
V4 = c(20, 22, 18),
V5 = c(16, 17, 19))
test_data
x <- iris[, 1:4]
x
sapply(x, function(x) x > mean(x))
rowSums(x1)
x1 <- sapply(x, function(x) x > mean(x))
x1
rowSums(x1)
rs <- rowSums(x1)
rs/2
x$rs <- rowSums(x1)
x$rs
##
x <- iris[, 1:4]
x1 <- sapply(x, function(x) x > mean(x))
x$rs <- rowSums(x1)
x$rs
x
x1
x$rs
x
rowSums(x1) > x$rs/2
factor(rowSums(x1) > x$rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases <- factor(rowSums(x1) > x$rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
str(x)
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(x1)
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
##
x <- iris[, 1:4]
x
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
means <- sapply(x, function(x) x > mean(x))
means
##
x <- iris[, 1:4]
x <- iris[, 1:4]
x
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
means
x <- iris[, 1:4]
x
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(x1)
rs
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
return(x)
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
x <- iris[, 1:4]
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(means)
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
x
x <- iris[, 1:4]
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(means)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
rowSums(means) > rs/2
means
rs
rs
rs > rs/2
rs
x
ncol(x)
x
x
ncol(x)
x
x <- iris[, 1:4]
x
x
ncol(x)
floor(ncol(x)/2)
factor(rs > floor(ncol(x)/2), levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases <- factor(rs > floor(ncol(x)/2), levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases
x
set.seed(42)
test_data <- data.frame(y = rnorm(10, 10, 1), x = rnorm(10, 10, 1))
transform_x(test_data)
test_data
cor.test(test_data$x^p, test_data$x^y)
cor.test
cor.test(test_data$x^p, test_data$x^y)
p <- 2
cor.test(test_data$x^p, test_data$x^y)
cor.test(test_data$x^p, test_data$y^)
cor.test(test_data$x^p, test_data$y^)
cor.test(test_data$x^p, test_data$y^p)
cor.test(test_data$x^p, test_data$y^p)$estimate
transform_x <- function(test_data) {
x <- test_data$x
y <- test_data$y
max_correlation <- -Inf
best_transformed_x <- NULL
# Перебираем различные показатели степени от -2 до 2 с шагом 0.1
for (lambda in seq(-2, 2, by = 0.1)) {
if (lambda > 0) {
transformed_x <- x^lambda
} else if (lambda == 0) {
transformed_x <- log(x)
} else {
transformed_x <- x
}
# Вычисляем корреляцию между трансформированным x и y
correlation <- abs(cor(transformed_x, y))
# Обновляем значения, если текущий показатель степени дает лучшую корреляцию
if (correlation > max_correlation) {
max_correlation <- correlation
best_transformed_x <- transformed_x
}
}
return(best_transformed_x)
}
seq(-2,2, by = 0.1)
cor <- as.numeric(lapply(p, transform_x))
transform_x <- function(test_data) {
(cor.test(test_data$x^p, test_data$y^p)$estimate)
}
p <- seq(-2,2, by = 0.1)
cor <- as.numeric(lapply(p, transform_x))
p <- 2
cor.test(test_data$x^p, test_data$y^p)$estimate
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
transform_x <- function(test_data) {
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
}
p <- seq(-2,2, by = 0.1)
cor <- as.numeric(lapply(p, transform_x))
p <- seq(-2,2, by = 0.1)
cor <- as.numeric(lapply(p, transform_x))
lapply(p, transform_x)
p
transform_x <- function(test_data) {
start = -2
end = 2
by = 0.1
# Диапазон значений лямбда
l <- seq(start, end, by)
# Трансформация
d <- outer(x, l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
outer(x, l, "^")
transform_x <- function(test_data) {
start = -2
end = 2
by = 0.1
# Диапазон значений лямбда
l <- seq(start, end, by)
# Трансформация
d <- outer(test_data[,1], l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
outer(test_data, l, "^")
# Диапазон значений лямбда
l <- seq(start, end, by)
l
# Диапазон значений лямбда
l <- seq(start, end, by)
seq(start, end, by)
seq(-2, 2, 0.1)
# Диапазон значений лямбда
l <- seq(-2, 2, 0.1)
outer(test_data, l, "^")
# Трансформация
d <- outer(test_data, l, "^")
d
find_lambda <- function(x, y, start = -5, end = 5, by = 0.1) {
# Диапазон значений лямбда
l <- seq(start, end, by)
# Трансформация
d <- outer(x, l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
find_lambda <- function(x, y, start = -5, end = 5, by = 0.1) {
# Диапазон значений лямбда
l <- seq(start, end, by)
# Трансформация
d <- outer(x, l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
d <- outer(x, l, "^")
x <- mtcars$hp
y <- mtcars$mpg
find_lambda(x, y)
find_lambda <- function(x, y, start = -5, end = 5, by = 0.1) {
# Диапазон значений лямбда
l <- seq(start, end, by)
# Трансформация
d <- outer(x, l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
d <- outer(x, l, "^")
d <- outer(x, l, "^")
d
set.seed(42)
test_data <- data.frame(y = rnorm(10, 10, 1), x = rnorm(10, 10, 1))
test_data
transform_x <-  function(dataset) {
x <- dataset[, 2]
ref <- dataset[, 1]
tukey <- function(lambda) {
if (lambda == 0) log(x)
else sign(lambda) * x^lambda
}
l <- optimize(function(x) abs(cor(tukey(x), ref)), -2:2, maximum = TRUE)
return(tukey(l$maximum))
}
transform_x(test_data)
x <- dataset[, 2]
x
transform_x <-  function(test_data) {
x <- test_data[, 2]
ref <- test_data[, 1]
tukey <- function(lambda) {
if (lambda == 0) log(x)
else sign(lambda) * x^lambda
}
l <- optimize(function(x) abs(cor(tukey(x), ref)), -2:2, maximum = TRUE)
return(tukey(l$maximum))
}
transform_x(test_data)
outer(test_data[,2], l, "^")
transform_x <- function(test_data) {
# Диапазон значений лямбда
l <- seq(-2, 2, 0.1)
# Трансформация
d <- outer(test_data[,2], l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(x)
# Расчёт корреляций
r <- cor(d, y)[, 1]
l[which.max(abs(r))]
}
transform_x(test_data)
test_data
transform_x(test_data)
transform_x <- function(test_data) {
# Диапазон значений лямбда
l <- seq(-2, 2, 0.1)
# Трансформация
d <- outer(test_data[,2], l, "^")
# Изменяем знак
d[, l < 0] <- -d[, l < 0]
# Для случая, где лямбда равна нулю
d[, l == 0] <- log(test_data[,2])
# Расчёт корреляций
r <- cor(d, test_data[,1])[, 1]
l[which.max(abs(r))]
}
transform_x(test_data)
test_data
set.seed(42)
test_data <- data.frame(y = rnorm(10, 10, 1), x = rnorm(10, 10, 1))
transform_x(test_data)
l
outer(test_data[,2], l, "^")
d[, l < 0]
transform_x <-  function(test_data) {
x <- test_data[, 2]
ref <- test_data[, 1]
tukey <- function(lambda) {
if (lambda == 0) log(x)
else sign(lambda) * x^lambda
}
l <- optimize(function(x) abs(cor(tukey(x), ref)), -2:2, maximum = TRUE)
return(tukey(l$maximum))
}
transform_x(test_data)
lambda
p <- 2
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
p <- seq(-2,2, by = 0.1)
p
transform_x <- function(test_data) {
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
}
transform_x <- function(test_data) {
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
}
transform_x(test_data)
transform_x <- function(test_data) {
abs((cor.test(test_data$x^p, test_data$y^p)$estimate))
}
