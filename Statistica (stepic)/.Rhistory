str(AirPassengers)
?AirPassengers
View(AirPassengers)
str(AirPassengers)
ap <- AirPassengers
ap <- data.frame(AirPassengers)
# Вариант 3
ap <- data.frame(AirPassengers)
AirPassengers
View(AirPassengers)
remove(list = ls())
remove(list = ls())
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700, 560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
x^2
x <- c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700) # Баллы за речь
sum(x) # Сумма баллов за речь
x_sq <- x^2 # Сумма баллов за речь
sum_x_sq <- sum(x_sq)
x^2
c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2
sum(c(490, 500, 530, 550, 580, 590, 600, 600, 650, 700)^2)
sum(x_sq)
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
y^2
y <- c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750) # Баллы за математику
sum(y) # Сумма баллов за математику
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2 # Квадраты баллов за математику
y_sq <- y^2 # Квадраты баллов за математику
y^2
c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2
sum(c(560, 500, 510, 600, 600, 620, 550, 630, 650, 750)^2)
sum(y_sq)
sum(x - mean(x))
sum((x - mean(x))^2)
sum((y-mean(y))^2)
sum((x - mean(x)) * sum(y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
sum((x - mean(x)) * (y - mean(y)))
ssxy/sqrt(ssx * ssy)
ssxy <- sum((x - mean(x)) * (y - mean(y)))
ssx  <- sum((x - mean(x))^2)
ssy  <- sum((y-mean(y))^2)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor.test(x, y)
## Формула расчета коэффициента корреляции
r = ssxy/sqrt(ssx * ssy)
r
cor(x, y, method = "pearson")
cor(x, y, method = "pearson", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen" )
cor(x, y, method = c("pearson", "kendall", "spearmen"))
cor(x, y, method = c("pearson", "kendall", "spearmen"))
?cor
cor(x, y, method = c("pearson", "kendall", "spearman"))
cor(x, y, method = c("pearson", "kendall", "spearman"))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
t.test(cor.test(x, y))
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
?t.test
t = r*sqrt(n - 2)/sqrt(1 - r^2)
t
cor.test(x, y)
r*sqrt(n - 2)/sqrt(1 - r^2)
### Проверка статистичиской значимсоти коэффициента корреляции Пирсона ###
n <- 10
t = r*sqrt(n - 2)/sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
r
sqrt(n - 2)
sqrt(4)
sqrt(n - 2)
[1] 2.828427
2.828427*0.8702621
r*sqrt(n - 2)
sqrt(1 - r^2)
r*sqrt(n - 2)/sqrt(1 - r^2)
2.461473/0.492589
2.46/0.49
r*sqrt(n - 2)/sqrt(1 - r^2)
0.87 * sqrt(10 - 2)/sqrt(1 - 0.87^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
0.84^2
0.11^2
- 0.28^2
-0.28^2
0.28^2
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
remove(ls = list())
remove(list = ls())
#### Exercise 1 (page 212) ####
# Некоторые исследования выявили слабую положительную связь между ростом и умственными способностями, то есть более высокие люди
# в среднем немного умнее. Использую формулы, представленные в этой главе,
# рассчитайте коэффициент корреляции Пирсона для данных представленных в таблице 7.2
# Затем проверьте корреляцию на статистическую значимость (проведите двухсторонний тест с уровнем значимости 0,05),
# рассситайте коэффициент детерминации и проанализируйте результаты
# Таблицы 7.2
student <- c(1:10)
height_inch <- c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
iq <- c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)
table_7.2 <- data.frame(student, height_inch, iq)
View(table_7.2)
cor.test(height_inch, iq)
0.1347945 * sqrt(10 - 2)/sqrt(1 - 0.1347945^2)
# 3) Рассситайте коэффициент детерминации и проанализируйте результаты
0.1347945^2
0.1347945^2
# альтернативный способ
ssx <- sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch)
sum(height_inch - mean(height_inch))
sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
sum(iq - mean(iq))
sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssx <- sum(height_inch - mean(height_inch))
ssx <- sum(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71)))
ssy <- sum(iq - mean(iq))
ssy <- sum(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100)))
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
ssxy <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)
*
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)
)
r = ssxy/sqrt(ssx * ssy)
r
r <- ssxy/sqrt(ssx * ssy)
r
cor.test(height_inch, iq)
ssxy
ssx
ssy
ssy
r <- 24.5/sqrt(5.684342e-14 * 0)
r
cor.test(height_inch, iq)
ssxy
sum((height_inch - mean(height_inch)) * (iq - mean(iq)))
sum(height_inch - mean(height_inch))
sum((height_inch - mean(height_inch))^2)
sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
sum(
(
iq - mean(iq)
)^2
)
sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssx
ssx <- sum(
(
height_inch - mean(height_inch)
)^2
)
ssx <- sum(
(
c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71) - mean(c(60, 62, 63, 65, 65, 67, 68, 70, 70, 71))
)^2
)
# ssy
ssy <- sum(
(
iq - mean(iq)
)^2
)
ssy <- sum(
(
c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100) - mean(c(103, 100, 98, 95, 110, 108, 104, 110, 97, 100))
)^2
)
# ssxy
ssxy <- sum((height_inch - mean(height_inch)) * (iq - mean(iq))) # 24.5
ssxy/sqrt(ssx * ssy)
r <-  ssxy/sqrt(ssx * ssy)
r
ssxy
ssx
ssy
24.5/sqrt(124.9 * 264.5)
ssxy/sqrt(ssx * ssy)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
n <- 10
t <-  r * sqrt(n - 2)/sqrt(1 - r^2)
r * sqrt(n - 2)/sqrt(1 - r^2)
cor.test(height_inch, iq)
r * sqrt(n - 2)/sqrt(1 - r^2)
sum(height_inch)
sum(height_inch^2)
sum(iq)
sum(iq^2)
sum(c(height_inch, iq))
sum(c(height_inch*iq))
remove(list = ls())
getwd()
setwd("/Users/zelimkhan/Desktop/Data/GitHub/Statistica/")
chisq.test(c(20, 15), c(11, 12), c(7, 9))
chisq.test(bbb)$pvalue
attributes(chisq.test(bbb))
chi <- chisq.test(bbb)
chi <- chisq.test(bbb)
chi <- chisq.test(c(20, 15), c(11, 12), c(7, 9))
attributes(chi)
chi$p.value
chisq.test(c(20, 11,7), c(15, 12, 9))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
remove(list = ls())
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p-value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p-value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$pvalue
chi <- chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))
chi$p.value
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
remove(list = ls())
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
rbind(c(20, 15), c(11, 12), c(7, 9))
cbind(c(20, 15), c(11, 12), c(7, 9)
cbind(c(20, 15), c(11, 12), c(7, 9))
cbind(c(20, 15), c(11, 12), c(7, 9))
chisq.test(rbind(c(20, 15), c(11, 12), c(7, 9)))$p.value
male <- c(20,11,7)
female <- c(15,12,9)
names <- c("TORM", "PRITORM", "NETORM")
data.frame(male, female, row.names =names)
chi <- chisq.test(data.frame(male, female, row.names =names))
chi
bbb <- data.frame(male, female, row.names =names)
chi <- chisq.test(bbb)
#3
c(20,11,7)
data.frame(c(20,11,7), c(15,12,9), c("TORM", "PRITORM", "NETORM"))
data.frame(c(20,11,7), c(15,12,9), row.names = c("TORM", "PRITORM", "NETORM"))
data.frame(row.names = c("TORM", "PRITORM", "NETORM", c(20,11,7), c(15,12,9)))
data.frame(row.names = "TORM", "PRITORM", "NETORM", c(20,11,7), c(15,12,9)))
data.frame(c(20,11,7), c(15,12,9), row.names = c("TORM", "PRITORM", "NETORM"))
data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))
chisq.test(data.frame(data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))))
chisq.test(data.frame(data.frame(row.names = c("TORM", "PRITORM", "NETORM"), c(20,11,7), c(15,12,9))))$p.value
chisq.test(data.frame(row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)))$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)
)$p.value
chisq.test(data.frame(
row.names = c("TORM", "PRITORM", "NETORM"),
c(20,11,7), c(15,12,9)
)
)$p.value
patients <- rbind(c(18, 7), c(6, 13))
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#воссоздадим таблицу
patients2 <- rbind(c(25, 1), c(3, 30))
#подпишем строки и столбцы
colnames(patients2) <- c("Yes", "No")
rownames(patients2) <- c("Placebo", "Aspirin")
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
knitr::opts_chunk$set(echo = TRUE)
x <- mtcars[,c("am", "vs")]
x <- mtcars[,c("am", "vs")]
x
table(x)
x1 <- table(x)
x1 < 5
any(x1 < 5)
chisq.test(x1)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
test_data
x <- test_data
x
contingency_cols <- sapply(x, table)
contingency_cols
chisq_for_cols <- apply(contingency_cols, 2, chisq.test)
chisq_for_cols <- apply(contingency_cols, 2, chisq.test)
chisq_for_cols
sapply(chisq_for_cols, "[", 3)
p_values
p_values <- sapply(chisq_for_cols, "[", 3)
p_values
x[which(p_values == min(unlist(p_values)))])
x[which(p_values == min(unlist(p_values)))]
unlist(p_values)
p_values
x1 <- apply(iris[, 1:4], 2, function(x)
ifelse(x >= mean(x, na.rm = T), 1, 0))
x1
apply(x1, 1, function(x)
ifelse(sum(x) >= 3, "Yes", "No"))
iris$important_cases <- as.factor(apply(x1, 1, function(x)
ifelse(sum(x) >= 3, "Yes", "No")))
num_cols <- sapply(iris, is.numeric)
num_cols
means <- colMeans(iris[num_cols])
means
colMeans(iris[num_cols]
colMeans(iris[num_cols]
colMeans(iris[num_cols])
res <- sweep(iris[num_cols], 2L, means, ">")
sweep(iris[num_cols], 2L, means, ">")
factor(rowSums(res) >= 3, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
library(dplyr)
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x))
iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x)) %>%
rowSums()
ir <- iris %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>%
sapply(function(x) x > mean(x)) %>%
rowSums()
ir
factor(ifelse(ir > 2, 'Yes', 'No'))
test_data <- data.frame(V1 = c(16, 21, 18),
V2 = c(17, 7, 16),
V3 = c(25, 23, 27),
V4 = c(20, 22, 18),
V5 = c(16, 17, 19))
test_data
x <- iris[, 1:4]
x
sapply(x, function(x) x > mean(x))
rowSums(x1)
x1 <- sapply(x, function(x) x > mean(x))
x1
rowSums(x1)
rs <- rowSums(x1)
rs/2
x$rs <- rowSums(x1)
x$rs
##
x <- iris[, 1:4]
x1 <- sapply(x, function(x) x > mean(x))
x$rs <- rowSums(x1)
x$rs
x
x1
x$rs
x
rowSums(x1) > x$rs/2
factor(rowSums(x1) > x$rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases <- factor(rowSums(x1) > x$rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
str(x)
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(x1)
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
##
x <- iris[, 1:4]
x
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
means <- sapply(x, function(x) x > mean(x))
means
##
x <- iris[, 1:4]
x <- iris[, 1:4]
x
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
means
x <- iris[, 1:4]
x
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(x1)
rs
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
return(x)
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
x <- iris[, 1:4]
get_important_cases <- function(x) {
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(x1)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
}
get_important_cases(x)
means <- sapply(x, function(x) x > mean(x))
means
rs <- rowSums(means)
rs
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
return(x)
x
x <- iris[, 1:4]
means <- sapply(x, function(x) x > mean(x))
rs <- rowSums(means)
x$important_cases <- factor(rowSums(means) > rs/2, levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x
rowSums(means) > rs/2
means
rs
rs
rs > rs/2
rs
x
ncol(x)
x
x
ncol(x)
x
x <- iris[, 1:4]
x
x
ncol(x)
floor(ncol(x)/2)
factor(rs > floor(ncol(x)/2), levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases <- factor(rs > floor(ncol(x)/2), levels = c(FALSE, TRUE), labels = c("No", "Yes"))
x$important_cases
x
